
hello.elf:     file format elf32-littlenios2
hello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002824 memsz 0x00002824 flags r-x
    LOAD off    0x00003844 vaddr 0x00012844 paddr 0x00013e9c align 2**12
         filesz 0x00001658 memsz 0x00001658 flags rw-
    LOAD off    0x000054f4 vaddr 0x000154f4 paddr 0x000154f4 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000025dc  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  0001280c  0001280c  0000380c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  00012844  00013e9c  00003844  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  000154f4  000154f4  000054f4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015614  00015614  00004e9c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004e9c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005d8  00000000  00000000  00004ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007819  00000000  00000000  00005498  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a88  00000000  00000000  0000ccb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002af3  00000000  00000000  0000f739  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b14  00000000  00000000  0001222c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001c65  00000000  00000000  00012d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000803  00000000  00000000  000149a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000151a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  000151b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00016e32  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00016e35  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016e41  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016e42  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00016e43  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00016e47  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00016e4b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00016e4f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00016e5a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00016e65  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00016e70  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000050  00000000  00000000  00016e7b  2**0
                  CONTENTS, READONLY
 29 .jdi          00005211  00000000  00000000  00016ecb  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003df58  00000000  00000000  0001c0dc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
0001280c l    d  .rodata	00000000 .rodata
00012844 l    d  .rwdata	00000000 .rwdata
000154f4 l    d  .bss	00000000 .bss
00015614 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000104f0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010658 l     F .text	00000034 alt_dev_reg
00012844 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001094c l     F .text	0000020c altera_avalon_jtag_uart_irq
00010b58 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00011190 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000113b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000114e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011510 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011970 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011ad0 l     F .text	0000003c alt_get_errno
00011b0c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00013a4c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001550c g     O .bss	00000004 alt_instruction_exception_handler
000105dc g     F .text	0000007c alt_main
00015514 g     O .bss	00000100 alt_irq
00013e9c g       *ABS*	00000000 __flash_rwdata_start
00011f7c g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00015510 g     O .bss	00000004 errno
000154f8 g     O .bss	00000004 alt_argv
0001be70 g       *ABS*	00000000 _gp
000138cc g     O .rwdata	00000180 alt_fd_list
00011fa0 g     F .text	00000090 alt_find_dev
00012360 g     F .text	00000148 memcpy
00011a54 g     F .text	0000007c alt_io_redirect
0001280c g       *ABS*	00000000 __DTOR_END__
000121fc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00010d50 g     F .text	0000021c altera_avalon_jtag_uart_read
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00013e80 g     O .rwdata	00000004 alt_max_fd
00013e94 g     O .rwdata	00000004 _global_impure_ptr
00015614 g       *ABS*	00000000 __bss_end
00011880 g     F .text	000000f0 alt_iic_isr_register
00011e74 g     F .text	00000108 alt_tick
00011834 g     F .text	0000004c alt_ic_irq_enabled
00011dd8 g     F .text	0000009c alt_alarm_stop
00015500 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
000138a4 g     O .rwdata	00000028 alt_dev_null
000114c4 g     F .text	00000020 alt_dcache_flush_all
00013e9c g       *ABS*	00000000 __ram_rwdata_end
00013e78 g     O .rwdata	00000008 alt_dev_list
00012844 g       *ABS*	00000000 __ram_rodata_end
00015614 g       *ABS*	00000000 end
0001088c g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001280c g       *ABS*	00000000 __CTOR_LIST__
0001c000 g       *ABS*	00000000 __alt_stack_pointer
00011208 g     F .text	0000007c alt_avalon_timer_sc_init
00010f6c g     F .text	00000224 altera_avalon_jtag_uart_write
00012658 g     F .text	00000180 __call_exitprocs
00010230 g     F .text	0000003c _start
00015504 g     O .bss	00000004 _alt_tick_rate
00015508 g     O .bss	00000004 _alt_nticks
000106c4 g     F .text	00000064 alt_sys_init
00012540 g     F .text	00000118 __register_exitproc
00010bf8 g     F .text	00000068 altera_avalon_jtag_uart_close
000104c8 g     F .text	00000028 .hidden __mulsi3
00012844 g       *ABS*	00000000 __ram_rwdata_start
0001280c g       *ABS*	00000000 __ram_rodata_start
00010728 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00012138 g     F .text	000000c4 alt_get_fd
000122e4 g     F .text	0000007c memcmp
000107e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015614 g       *ABS*	00000000 __alt_stack_base
00010838 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012030 g     F .text	00000108 alt_find_file
0001154c g     F .text	000000a4 alt_dev_llist_insert
000154f4 g       *ABS*	00000000 __bss_start
0001026c g     F .text	0000025c main
000154fc g     O .bss	00000004 alt_envp
00010788 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00013e84 g     O .rwdata	00000004 alt_errno
0001280c g       *ABS*	00000000 __CTOR_END__
0001280c g       *ABS*	00000000 __flash_rodata_start
0001280c g       *ABS*	00000000 __DTOR_LIST__
0001068c g     F .text	00000038 alt_irq_init
00011d54 g     F .text	00000084 alt_release_fd
00012298 g     F .text	00000014 atexit
00013e98 g     O .rwdata	00000004 _impure_ptr
000154f4 g     O .bss	00000004 alt_argc
00011650 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00013e70 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000116d0 g     F .text	00000050 alt_ic_isr_register
00013e9c g       *ABS*	00000000 _edata
00015614 g       *ABS*	00000000 _end
00010230 g       *ABS*	00000000 __ram_exceptions_end
00010c60 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000117a8 g     F .text	0000008c alt_ic_irq_disable
000122ac g     F .text	00000038 exit
0001c000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000127d8 g     F .text	00000034 _exit
00011284 g     F .text	0000012c alt_alarm_start
000124a8 g     F .text	00000098 strlen
00011bf8 g     F .text	0000015c open
000116b0 g     F .text	00000020 alt_icache_flush_all
00013e88 g     O .rwdata	00000004 alt_priority_mask
00011720 g     F .text	00000088 alt_ic_irq_enable
00013e8c g     O .rwdata	00000008 alt_alarm_list
000115f0 g     F .text	00000060 _do_ctors
000113ec g     F .text	000000d8 close
00010558 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	00800074 	movhi	r2,1
   10140:	10954504 	addi	r2,r2,21780
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	10954504 	addi	r2,r2,21780
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <__alt_data_end+0xffff412c>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <__alt_data_end+0xffff4120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a5a717 	ldw	r2,-26980(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a5a717 	ldw	r2,-26980(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	def00014 	ori	sp,sp,49152
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6af9c14 	ori	gp,gp,48752
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	10953d14 	ori	r2,r2,21748

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18d58514 	ori	r3,r3,22036

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <__alt_data_end+0xffff4254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	00105580 	call	10558 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	00105dc0 	call	105dc <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <__alt_data_end+0xffff4268>

0001026c <main>:
#include <stdio.h>
# include <system.h>
# include <altera_avalon_pio_regs.h>

int main()
{
   1026c:	deffdf04 	addi	sp,sp,-132
   10270:	dfc02015 	stw	ra,128(sp)
   10274:	df001f15 	stw	fp,124(sp)
   10278:	df001f04 	addi	fp,sp,124
  int Matrix_A[3][3] = {
   1027c:	00800044 	movi	r2,1
   10280:	e0bfe515 	stw	r2,-108(fp)
   10284:	00800084 	movi	r2,2
   10288:	e0bfe615 	stw	r2,-104(fp)
   1028c:	008000c4 	movi	r2,3
   10290:	e0bfe715 	stw	r2,-100(fp)
   10294:	00800144 	movi	r2,5
   10298:	e0bfe815 	stw	r2,-96(fp)
   1029c:	e03fe915 	stw	zero,-92(fp)
   102a0:	00800044 	movi	r2,1
   102a4:	e0bfea15 	stw	r2,-88(fp)
   102a8:	00800084 	movi	r2,2
   102ac:	e0bfeb15 	stw	r2,-84(fp)
   102b0:	008000c4 	movi	r2,3
   102b4:	e0bfec15 	stw	r2,-80(fp)
   102b8:	008001c4 	movi	r2,7
   102bc:	e0bfed15 	stw	r2,-76(fp)
		  {1, 2, 3} ,
		  {5, 0, 1} ,
		  {2, 3, 7}
  };
  int Matrix_B[3][3] = {
   102c0:	008000c4 	movi	r2,3
   102c4:	e0bfee15 	stw	r2,-72(fp)
   102c8:	00800084 	movi	r2,2
   102cc:	e0bfef15 	stw	r2,-68(fp)
   102d0:	e03ff015 	stw	zero,-64(fp)
   102d4:	e03ff115 	stw	zero,-60(fp)
   102d8:	00800044 	movi	r2,1
   102dc:	e0bff215 	stw	r2,-56(fp)
   102e0:	e03ff315 	stw	zero,-52(fp)
   102e4:	00800144 	movi	r2,5
   102e8:	e0bff415 	stw	r2,-48(fp)
   102ec:	00800184 	movi	r2,6
   102f0:	e0bff515 	stw	r2,-44(fp)
   102f4:	00800104 	movi	r2,4
   102f8:	e0bff615 	stw	r2,-40(fp)
		  {3, 2, 0} ,
		  {0, 1, 0} ,
		  {5, 6, 4}
  };
  int Matrix_C[3][3] = {
   102fc:	e03ff715 	stw	zero,-36(fp)
   10300:	e03ff815 	stw	zero,-32(fp)
   10304:	e03ff915 	stw	zero,-28(fp)
   10308:	e03ffa15 	stw	zero,-24(fp)
   1030c:	e03ffb15 	stw	zero,-20(fp)
   10310:	e03ffc15 	stw	zero,-16(fp)
   10314:	e03ffd15 	stw	zero,-12(fp)
   10318:	e03ffe15 	stw	zero,-8(fp)
   1031c:	e03fff15 	stw	zero,-4(fp)
		  {0, 0, 0} ,
		  {0, 0, 0} ,
		  {0, 0, 0}
  };
  int i, j, k;
  int sum = 0;
   10320:	e03fe415 	stw	zero,-112(fp)
 //----------------------------------- Matrix Multiplication Main Logic ------------------------------------------//
     for (i = 0; i <= 2; i++) {
   10324:	e03fe115 	stw	zero,-124(fp)
   10328:	00003f06 	br	10428 <main+0x1bc>
        for (j = 0; j <= 2; j++) {
   1032c:	e03fe215 	stw	zero,-120(fp)
   10330:	00003706 	br	10410 <main+0x1a4>
           sum = 0;
   10334:	e03fe415 	stw	zero,-112(fp)
           for (k = 0; k <= 2; k++) {
   10338:	e03fe315 	stw	zero,-116(fp)
   1033c:	00002106 	br	103c4 <main+0x158>
              sum = sum + Matrix_A[i][k] * Matrix_B[k][j];
   10340:	e0ffe117 	ldw	r3,-124(fp)
   10344:	1805883a 	mov	r2,r3
   10348:	1085883a 	add	r2,r2,r2
   1034c:	10c5883a 	add	r2,r2,r3
   10350:	e0ffe317 	ldw	r3,-116(fp)
   10354:	10c5883a 	add	r2,r2,r3
   10358:	1085883a 	add	r2,r2,r2
   1035c:	1085883a 	add	r2,r2,r2
   10360:	e0ffe104 	addi	r3,fp,-124
   10364:	1885883a 	add	r2,r3,r2
   10368:	10800404 	addi	r2,r2,16
   1036c:	11000017 	ldw	r4,0(r2)
   10370:	e0ffe317 	ldw	r3,-116(fp)
   10374:	1805883a 	mov	r2,r3
   10378:	1085883a 	add	r2,r2,r2
   1037c:	10c5883a 	add	r2,r2,r3
   10380:	e0ffe217 	ldw	r3,-120(fp)
   10384:	10c5883a 	add	r2,r2,r3
   10388:	1085883a 	add	r2,r2,r2
   1038c:	1085883a 	add	r2,r2,r2
   10390:	e0ffe104 	addi	r3,fp,-124
   10394:	1885883a 	add	r2,r3,r2
   10398:	10800d04 	addi	r2,r2,52
   1039c:	10800017 	ldw	r2,0(r2)
   103a0:	100b883a 	mov	r5,r2
   103a4:	00104c80 	call	104c8 <__mulsi3>
   103a8:	1007883a 	mov	r3,r2
   103ac:	e0bfe417 	ldw	r2,-112(fp)
   103b0:	10c5883a 	add	r2,r2,r3
   103b4:	e0bfe415 	stw	r2,-112(fp)
  int sum = 0;
 //----------------------------------- Matrix Multiplication Main Logic ------------------------------------------//
     for (i = 0; i <= 2; i++) {
        for (j = 0; j <= 2; j++) {
           sum = 0;
           for (k = 0; k <= 2; k++) {
   103b8:	e0bfe317 	ldw	r2,-116(fp)
   103bc:	10800044 	addi	r2,r2,1
   103c0:	e0bfe315 	stw	r2,-116(fp)
   103c4:	e0bfe317 	ldw	r2,-116(fp)
   103c8:	108000d0 	cmplti	r2,r2,3
   103cc:	103fdc1e 	bne	r2,zero,10340 <__alt_data_end+0xffff4340>
              sum = sum + Matrix_A[i][k] * Matrix_B[k][j];
           }
           Matrix_C[i][j] = sum;
   103d0:	e0ffe117 	ldw	r3,-124(fp)
   103d4:	1805883a 	mov	r2,r3
   103d8:	1085883a 	add	r2,r2,r2
   103dc:	10c5883a 	add	r2,r2,r3
   103e0:	e0ffe217 	ldw	r3,-120(fp)
   103e4:	10c5883a 	add	r2,r2,r3
   103e8:	1085883a 	add	r2,r2,r2
   103ec:	1085883a 	add	r2,r2,r2
   103f0:	e0ffe104 	addi	r3,fp,-124
   103f4:	1885883a 	add	r2,r3,r2
   103f8:	10801604 	addi	r2,r2,88
   103fc:	e0ffe417 	ldw	r3,-112(fp)
   10400:	10c00015 	stw	r3,0(r2)
  };
  int i, j, k;
  int sum = 0;
 //----------------------------------- Matrix Multiplication Main Logic ------------------------------------------//
     for (i = 0; i <= 2; i++) {
        for (j = 0; j <= 2; j++) {
   10404:	e0bfe217 	ldw	r2,-120(fp)
   10408:	10800044 	addi	r2,r2,1
   1040c:	e0bfe215 	stw	r2,-120(fp)
   10410:	e0bfe217 	ldw	r2,-120(fp)
   10414:	108000d0 	cmplti	r2,r2,3
   10418:	103fc61e 	bne	r2,zero,10334 <__alt_data_end+0xffff4334>
		  {0, 0, 0}
  };
  int i, j, k;
  int sum = 0;
 //----------------------------------- Matrix Multiplication Main Logic ------------------------------------------//
     for (i = 0; i <= 2; i++) {
   1041c:	e0bfe117 	ldw	r2,-124(fp)
   10420:	10800044 	addi	r2,r2,1
   10424:	e0bfe115 	stw	r2,-124(fp)
   10428:	e0bfe117 	ldw	r2,-124(fp)
   1042c:	108000d0 	cmplti	r2,r2,3
   10430:	103fbe1e 	bne	r2,zero,1032c <__alt_data_end+0xffff432c>
           }
           Matrix_C[i][j] = sum;
        }
     }
//---------------------------------------- Displaying Result Matrix C --------------------------------------------//
     for (i = 0; i < 3; i++) {
   10434:	e03fe115 	stw	zero,-124(fp)
   10438:	00001a06 	br	104a4 <main+0x238>
           for (j = 0; j < 3; j++) {
   1043c:	e03fe215 	stw	zero,-120(fp)
   10440:	00001206 	br	1048c <main+0x220>
        	   IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, Matrix_C[i][j] );
   10444:	e0ffe117 	ldw	r3,-124(fp)
   10448:	1805883a 	mov	r2,r3
   1044c:	1085883a 	add	r2,r2,r2
   10450:	10c5883a 	add	r2,r2,r3
   10454:	e0ffe217 	ldw	r3,-120(fp)
   10458:	10c5883a 	add	r2,r2,r3
   1045c:	1085883a 	add	r2,r2,r2
   10460:	1085883a 	add	r2,r2,r2
   10464:	e0ffe104 	addi	r3,fp,-124
   10468:	1885883a 	add	r2,r3,r2
   1046c:	10801604 	addi	r2,r2,88
   10470:	10c00017 	ldw	r3,0(r2)
   10474:	008000b4 	movhi	r2,2
   10478:	10840804 	addi	r2,r2,4128
   1047c:	10c00035 	stwio	r3,0(r2)
           Matrix_C[i][j] = sum;
        }
     }
//---------------------------------------- Displaying Result Matrix C --------------------------------------------//
     for (i = 0; i < 3; i++) {
           for (j = 0; j < 3; j++) {
   10480:	e0bfe217 	ldw	r2,-120(fp)
   10484:	10800044 	addi	r2,r2,1
   10488:	e0bfe215 	stw	r2,-120(fp)
   1048c:	e0bfe217 	ldw	r2,-120(fp)
   10490:	108000d0 	cmplti	r2,r2,3
   10494:	103feb1e 	bne	r2,zero,10444 <__alt_data_end+0xffff4444>
           }
           Matrix_C[i][j] = sum;
        }
     }
//---------------------------------------- Displaying Result Matrix C --------------------------------------------//
     for (i = 0; i < 3; i++) {
   10498:	e0bfe117 	ldw	r2,-124(fp)
   1049c:	10800044 	addi	r2,r2,1
   104a0:	e0bfe115 	stw	r2,-124(fp)
   104a4:	e0bfe117 	ldw	r2,-124(fp)
   104a8:	108000d0 	cmplti	r2,r2,3
   104ac:	103fe31e 	bne	r2,zero,1043c <__alt_data_end+0xffff443c>
           for (j = 0; j < 3; j++) {
        	   IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, Matrix_C[i][j] );
           }
        }

  return 0;
   104b0:	0005883a 	mov	r2,zero
}
   104b4:	e037883a 	mov	sp,fp
   104b8:	dfc00117 	ldw	ra,4(sp)
   104bc:	df000017 	ldw	fp,0(sp)
   104c0:	dec00204 	addi	sp,sp,8
   104c4:	f800283a 	ret

000104c8 <__mulsi3>:
   104c8:	0005883a 	mov	r2,zero
   104cc:	20000726 	beq	r4,zero,104ec <__mulsi3+0x24>
   104d0:	20c0004c 	andi	r3,r4,1
   104d4:	2008d07a 	srli	r4,r4,1
   104d8:	18000126 	beq	r3,zero,104e0 <__mulsi3+0x18>
   104dc:	1145883a 	add	r2,r2,r5
   104e0:	294b883a 	add	r5,r5,r5
   104e4:	203ffa1e 	bne	r4,zero,104d0 <__alt_data_end+0xffff44d0>
   104e8:	f800283a 	ret
   104ec:	f800283a 	ret

000104f0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   104f0:	defffc04 	addi	sp,sp,-16
   104f4:	df000315 	stw	fp,12(sp)
   104f8:	df000304 	addi	fp,sp,12
   104fc:	e13ffd15 	stw	r4,-12(fp)
   10500:	e17ffe15 	stw	r5,-8(fp)
   10504:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10508:	e0fffe17 	ldw	r3,-8(fp)
   1050c:	e0bffd17 	ldw	r2,-12(fp)
   10510:	18800c26 	beq	r3,r2,10544 <alt_load_section+0x54>
  {
    while( to != end )
   10514:	00000806 	br	10538 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10518:	e0bffe17 	ldw	r2,-8(fp)
   1051c:	10c00104 	addi	r3,r2,4
   10520:	e0fffe15 	stw	r3,-8(fp)
   10524:	e0fffd17 	ldw	r3,-12(fp)
   10528:	19000104 	addi	r4,r3,4
   1052c:	e13ffd15 	stw	r4,-12(fp)
   10530:	18c00017 	ldw	r3,0(r3)
   10534:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10538:	e0fffe17 	ldw	r3,-8(fp)
   1053c:	e0bfff17 	ldw	r2,-4(fp)
   10540:	18bff51e 	bne	r3,r2,10518 <__alt_data_end+0xffff4518>
    {
      *to++ = *from++;
    }
  }
}
   10544:	0001883a 	nop
   10548:	e037883a 	mov	sp,fp
   1054c:	df000017 	ldw	fp,0(sp)
   10550:	dec00104 	addi	sp,sp,4
   10554:	f800283a 	ret

00010558 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10558:	defffe04 	addi	sp,sp,-8
   1055c:	dfc00115 	stw	ra,4(sp)
   10560:	df000015 	stw	fp,0(sp)
   10564:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10568:	01800074 	movhi	r6,1
   1056c:	318fa704 	addi	r6,r6,16028
   10570:	01400074 	movhi	r5,1
   10574:	294a1104 	addi	r5,r5,10308
   10578:	01000074 	movhi	r4,1
   1057c:	210fa704 	addi	r4,r4,16028
   10580:	00104f00 	call	104f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10584:	01800074 	movhi	r6,1
   10588:	31808c04 	addi	r6,r6,560
   1058c:	01400074 	movhi	r5,1
   10590:	29400804 	addi	r5,r5,32
   10594:	01000074 	movhi	r4,1
   10598:	21000804 	addi	r4,r4,32
   1059c:	00104f00 	call	104f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   105a0:	01800074 	movhi	r6,1
   105a4:	318a1104 	addi	r6,r6,10308
   105a8:	01400074 	movhi	r5,1
   105ac:	294a0304 	addi	r5,r5,10252
   105b0:	01000074 	movhi	r4,1
   105b4:	210a0304 	addi	r4,r4,10252
   105b8:	00104f00 	call	104f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   105bc:	00114c40 	call	114c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   105c0:	00116b00 	call	116b0 <alt_icache_flush_all>
}
   105c4:	0001883a 	nop
   105c8:	e037883a 	mov	sp,fp
   105cc:	dfc00117 	ldw	ra,4(sp)
   105d0:	df000017 	ldw	fp,0(sp)
   105d4:	dec00204 	addi	sp,sp,8
   105d8:	f800283a 	ret

000105dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   105dc:	defffd04 	addi	sp,sp,-12
   105e0:	dfc00215 	stw	ra,8(sp)
   105e4:	df000115 	stw	fp,4(sp)
   105e8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   105ec:	0009883a 	mov	r4,zero
   105f0:	001068c0 	call	1068c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   105f4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   105f8:	00106c40 	call	106c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   105fc:	01800074 	movhi	r6,1
   10600:	318a0304 	addi	r6,r6,10252
   10604:	01400074 	movhi	r5,1
   10608:	294a0304 	addi	r5,r5,10252
   1060c:	01000074 	movhi	r4,1
   10610:	210a0304 	addi	r4,r4,10252
   10614:	0011a540 	call	11a54 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10618:	00115f00 	call	115f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1061c:	01000074 	movhi	r4,1
   10620:	21059404 	addi	r4,r4,5712
   10624:	00122980 	call	12298 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10628:	d0a5a117 	ldw	r2,-27004(gp)
   1062c:	d0e5a217 	ldw	r3,-27000(gp)
   10630:	d125a317 	ldw	r4,-26996(gp)
   10634:	200d883a 	mov	r6,r4
   10638:	180b883a 	mov	r5,r3
   1063c:	1009883a 	mov	r4,r2
   10640:	001026c0 	call	1026c <main>
   10644:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10648:	01000044 	movi	r4,1
   1064c:	00113ec0 	call	113ec <close>
  exit (result);
   10650:	e13fff17 	ldw	r4,-4(fp)
   10654:	00122ac0 	call	122ac <exit>

00010658 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10658:	defffd04 	addi	sp,sp,-12
   1065c:	dfc00215 	stw	ra,8(sp)
   10660:	df000115 	stw	fp,4(sp)
   10664:	df000104 	addi	fp,sp,4
   10668:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1066c:	d1600204 	addi	r5,gp,-32760
   10670:	e13fff17 	ldw	r4,-4(fp)
   10674:	001154c0 	call	1154c <alt_dev_llist_insert>
}
   10678:	e037883a 	mov	sp,fp
   1067c:	dfc00117 	ldw	ra,4(sp)
   10680:	df000017 	ldw	fp,0(sp)
   10684:	dec00204 	addi	sp,sp,8
   10688:	f800283a 	ret

0001068c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1068c:	defffd04 	addi	sp,sp,-12
   10690:	dfc00215 	stw	ra,8(sp)
   10694:	df000115 	stw	fp,4(sp)
   10698:	df000104 	addi	fp,sp,4
   1069c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   106a0:	0011f7c0 	call	11f7c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   106a4:	00800044 	movi	r2,1
   106a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   106ac:	0001883a 	nop
   106b0:	e037883a 	mov	sp,fp
   106b4:	dfc00117 	ldw	ra,4(sp)
   106b8:	df000017 	ldw	fp,0(sp)
   106bc:	dec00204 	addi	sp,sp,8
   106c0:	f800283a 	ret

000106c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   106c4:	defffe04 	addi	sp,sp,-8
   106c8:	dfc00115 	stw	ra,4(sp)
   106cc:	df000015 	stw	fp,0(sp)
   106d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   106d4:	01c0fa04 	movi	r7,1000
   106d8:	000d883a 	mov	r6,zero
   106dc:	000b883a 	mov	r5,zero
   106e0:	010000b4 	movhi	r4,2
   106e4:	21040004 	addi	r4,r4,4096
   106e8:	00112080 	call	11208 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   106ec:	01800044 	movi	r6,1
   106f0:	000b883a 	mov	r5,zero
   106f4:	01000074 	movhi	r4,1
   106f8:	210a1b04 	addi	r4,r4,10348
   106fc:	001088c0 	call	1088c <altera_avalon_jtag_uart_init>
   10700:	01000074 	movhi	r4,1
   10704:	210a1104 	addi	r4,r4,10308
   10708:	00106580 	call	10658 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1070c:	0001883a 	nop
}
   10710:	0001883a 	nop
   10714:	e037883a 	mov	sp,fp
   10718:	dfc00117 	ldw	ra,4(sp)
   1071c:	df000017 	ldw	fp,0(sp)
   10720:	dec00204 	addi	sp,sp,8
   10724:	f800283a 	ret

00010728 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10728:	defffa04 	addi	sp,sp,-24
   1072c:	dfc00515 	stw	ra,20(sp)
   10730:	df000415 	stw	fp,16(sp)
   10734:	df000404 	addi	fp,sp,16
   10738:	e13ffd15 	stw	r4,-12(fp)
   1073c:	e17ffe15 	stw	r5,-8(fp)
   10740:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10744:	e0bffd17 	ldw	r2,-12(fp)
   10748:	10800017 	ldw	r2,0(r2)
   1074c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10750:	e0bffc17 	ldw	r2,-16(fp)
   10754:	10c00a04 	addi	r3,r2,40
   10758:	e0bffd17 	ldw	r2,-12(fp)
   1075c:	10800217 	ldw	r2,8(r2)
   10760:	100f883a 	mov	r7,r2
   10764:	e1bfff17 	ldw	r6,-4(fp)
   10768:	e17ffe17 	ldw	r5,-8(fp)
   1076c:	1809883a 	mov	r4,r3
   10770:	0010d500 	call	10d50 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10774:	e037883a 	mov	sp,fp
   10778:	dfc00117 	ldw	ra,4(sp)
   1077c:	df000017 	ldw	fp,0(sp)
   10780:	dec00204 	addi	sp,sp,8
   10784:	f800283a 	ret

00010788 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10788:	defffa04 	addi	sp,sp,-24
   1078c:	dfc00515 	stw	ra,20(sp)
   10790:	df000415 	stw	fp,16(sp)
   10794:	df000404 	addi	fp,sp,16
   10798:	e13ffd15 	stw	r4,-12(fp)
   1079c:	e17ffe15 	stw	r5,-8(fp)
   107a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   107a4:	e0bffd17 	ldw	r2,-12(fp)
   107a8:	10800017 	ldw	r2,0(r2)
   107ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   107b0:	e0bffc17 	ldw	r2,-16(fp)
   107b4:	10c00a04 	addi	r3,r2,40
   107b8:	e0bffd17 	ldw	r2,-12(fp)
   107bc:	10800217 	ldw	r2,8(r2)
   107c0:	100f883a 	mov	r7,r2
   107c4:	e1bfff17 	ldw	r6,-4(fp)
   107c8:	e17ffe17 	ldw	r5,-8(fp)
   107cc:	1809883a 	mov	r4,r3
   107d0:	0010f6c0 	call	10f6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   107d4:	e037883a 	mov	sp,fp
   107d8:	dfc00117 	ldw	ra,4(sp)
   107dc:	df000017 	ldw	fp,0(sp)
   107e0:	dec00204 	addi	sp,sp,8
   107e4:	f800283a 	ret

000107e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   107e8:	defffc04 	addi	sp,sp,-16
   107ec:	dfc00315 	stw	ra,12(sp)
   107f0:	df000215 	stw	fp,8(sp)
   107f4:	df000204 	addi	fp,sp,8
   107f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   107fc:	e0bfff17 	ldw	r2,-4(fp)
   10800:	10800017 	ldw	r2,0(r2)
   10804:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10808:	e0bffe17 	ldw	r2,-8(fp)
   1080c:	10c00a04 	addi	r3,r2,40
   10810:	e0bfff17 	ldw	r2,-4(fp)
   10814:	10800217 	ldw	r2,8(r2)
   10818:	100b883a 	mov	r5,r2
   1081c:	1809883a 	mov	r4,r3
   10820:	0010bf80 	call	10bf8 <altera_avalon_jtag_uart_close>
}
   10824:	e037883a 	mov	sp,fp
   10828:	dfc00117 	ldw	ra,4(sp)
   1082c:	df000017 	ldw	fp,0(sp)
   10830:	dec00204 	addi	sp,sp,8
   10834:	f800283a 	ret

00010838 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10838:	defffa04 	addi	sp,sp,-24
   1083c:	dfc00515 	stw	ra,20(sp)
   10840:	df000415 	stw	fp,16(sp)
   10844:	df000404 	addi	fp,sp,16
   10848:	e13ffd15 	stw	r4,-12(fp)
   1084c:	e17ffe15 	stw	r5,-8(fp)
   10850:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10854:	e0bffd17 	ldw	r2,-12(fp)
   10858:	10800017 	ldw	r2,0(r2)
   1085c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10860:	e0bffc17 	ldw	r2,-16(fp)
   10864:	10800a04 	addi	r2,r2,40
   10868:	e1bfff17 	ldw	r6,-4(fp)
   1086c:	e17ffe17 	ldw	r5,-8(fp)
   10870:	1009883a 	mov	r4,r2
   10874:	0010c600 	call	10c60 <altera_avalon_jtag_uart_ioctl>
}
   10878:	e037883a 	mov	sp,fp
   1087c:	dfc00117 	ldw	ra,4(sp)
   10880:	df000017 	ldw	fp,0(sp)
   10884:	dec00204 	addi	sp,sp,8
   10888:	f800283a 	ret

0001088c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1088c:	defffa04 	addi	sp,sp,-24
   10890:	dfc00515 	stw	ra,20(sp)
   10894:	df000415 	stw	fp,16(sp)
   10898:	df000404 	addi	fp,sp,16
   1089c:	e13ffd15 	stw	r4,-12(fp)
   108a0:	e17ffe15 	stw	r5,-8(fp)
   108a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   108a8:	e0bffd17 	ldw	r2,-12(fp)
   108ac:	00c00044 	movi	r3,1
   108b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   108b4:	e0bffd17 	ldw	r2,-12(fp)
   108b8:	10800017 	ldw	r2,0(r2)
   108bc:	10800104 	addi	r2,r2,4
   108c0:	1007883a 	mov	r3,r2
   108c4:	e0bffd17 	ldw	r2,-12(fp)
   108c8:	10800817 	ldw	r2,32(r2)
   108cc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   108d0:	e0bffe17 	ldw	r2,-8(fp)
   108d4:	e0ffff17 	ldw	r3,-4(fp)
   108d8:	d8000015 	stw	zero,0(sp)
   108dc:	e1fffd17 	ldw	r7,-12(fp)
   108e0:	01800074 	movhi	r6,1
   108e4:	31825304 	addi	r6,r6,2380
   108e8:	180b883a 	mov	r5,r3
   108ec:	1009883a 	mov	r4,r2
   108f0:	00116d00 	call	116d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   108f4:	e0bffd17 	ldw	r2,-12(fp)
   108f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   108fc:	e0bffd17 	ldw	r2,-12(fp)
   10900:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10904:	d0e5a517 	ldw	r3,-26988(gp)
   10908:	e1fffd17 	ldw	r7,-12(fp)
   1090c:	01800074 	movhi	r6,1
   10910:	3182d604 	addi	r6,r6,2904
   10914:	180b883a 	mov	r5,r3
   10918:	1009883a 	mov	r4,r2
   1091c:	00112840 	call	11284 <alt_alarm_start>
   10920:	1000040e 	bge	r2,zero,10934 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10924:	e0fffd17 	ldw	r3,-12(fp)
   10928:	00a00034 	movhi	r2,32768
   1092c:	10bfffc4 	addi	r2,r2,-1
   10930:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10934:	0001883a 	nop
   10938:	e037883a 	mov	sp,fp
   1093c:	dfc00117 	ldw	ra,4(sp)
   10940:	df000017 	ldw	fp,0(sp)
   10944:	dec00204 	addi	sp,sp,8
   10948:	f800283a 	ret

0001094c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1094c:	defff804 	addi	sp,sp,-32
   10950:	df000715 	stw	fp,28(sp)
   10954:	df000704 	addi	fp,sp,28
   10958:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1095c:	e0bfff17 	ldw	r2,-4(fp)
   10960:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10964:	e0bffb17 	ldw	r2,-20(fp)
   10968:	10800017 	ldw	r2,0(r2)
   1096c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10970:	e0bffc17 	ldw	r2,-16(fp)
   10974:	10800104 	addi	r2,r2,4
   10978:	10800037 	ldwio	r2,0(r2)
   1097c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10980:	e0bffd17 	ldw	r2,-12(fp)
   10984:	1080c00c 	andi	r2,r2,768
   10988:	10006d26 	beq	r2,zero,10b40 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1098c:	e0bffd17 	ldw	r2,-12(fp)
   10990:	1080400c 	andi	r2,r2,256
   10994:	10003526 	beq	r2,zero,10a6c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10998:	00800074 	movhi	r2,1
   1099c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   109a0:	e0bffb17 	ldw	r2,-20(fp)
   109a4:	10800a17 	ldw	r2,40(r2)
   109a8:	10800044 	addi	r2,r2,1
   109ac:	1081ffcc 	andi	r2,r2,2047
   109b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   109b4:	e0bffb17 	ldw	r2,-20(fp)
   109b8:	10c00b17 	ldw	r3,44(r2)
   109bc:	e0bffe17 	ldw	r2,-8(fp)
   109c0:	18801526 	beq	r3,r2,10a18 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   109c4:	e0bffc17 	ldw	r2,-16(fp)
   109c8:	10800037 	ldwio	r2,0(r2)
   109cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   109d0:	e0bff917 	ldw	r2,-28(fp)
   109d4:	10a0000c 	andi	r2,r2,32768
   109d8:	10001126 	beq	r2,zero,10a20 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   109dc:	e0bffb17 	ldw	r2,-20(fp)
   109e0:	10800a17 	ldw	r2,40(r2)
   109e4:	e0fff917 	ldw	r3,-28(fp)
   109e8:	1809883a 	mov	r4,r3
   109ec:	e0fffb17 	ldw	r3,-20(fp)
   109f0:	1885883a 	add	r2,r3,r2
   109f4:	10800e04 	addi	r2,r2,56
   109f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   109fc:	e0bffb17 	ldw	r2,-20(fp)
   10a00:	10800a17 	ldw	r2,40(r2)
   10a04:	10800044 	addi	r2,r2,1
   10a08:	10c1ffcc 	andi	r3,r2,2047
   10a0c:	e0bffb17 	ldw	r2,-20(fp)
   10a10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10a14:	003fe206 	br	109a0 <__alt_data_end+0xffff49a0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10a18:	0001883a 	nop
   10a1c:	00000106 	br	10a24 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10a20:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10a24:	e0bff917 	ldw	r2,-28(fp)
   10a28:	10bfffec 	andhi	r2,r2,65535
   10a2c:	10000f26 	beq	r2,zero,10a6c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10a30:	e0bffb17 	ldw	r2,-20(fp)
   10a34:	10c00817 	ldw	r3,32(r2)
   10a38:	00bfff84 	movi	r2,-2
   10a3c:	1886703a 	and	r3,r3,r2
   10a40:	e0bffb17 	ldw	r2,-20(fp)
   10a44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10a48:	e0bffc17 	ldw	r2,-16(fp)
   10a4c:	10800104 	addi	r2,r2,4
   10a50:	1007883a 	mov	r3,r2
   10a54:	e0bffb17 	ldw	r2,-20(fp)
   10a58:	10800817 	ldw	r2,32(r2)
   10a5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10a60:	e0bffc17 	ldw	r2,-16(fp)
   10a64:	10800104 	addi	r2,r2,4
   10a68:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10a6c:	e0bffd17 	ldw	r2,-12(fp)
   10a70:	1080800c 	andi	r2,r2,512
   10a74:	103fbe26 	beq	r2,zero,10970 <__alt_data_end+0xffff4970>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10a78:	e0bffd17 	ldw	r2,-12(fp)
   10a7c:	1004d43a 	srli	r2,r2,16
   10a80:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10a84:	00001406 	br	10ad8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10a88:	e0bffc17 	ldw	r2,-16(fp)
   10a8c:	e0fffb17 	ldw	r3,-20(fp)
   10a90:	18c00d17 	ldw	r3,52(r3)
   10a94:	e13ffb17 	ldw	r4,-20(fp)
   10a98:	20c7883a 	add	r3,r4,r3
   10a9c:	18c20e04 	addi	r3,r3,2104
   10aa0:	18c00003 	ldbu	r3,0(r3)
   10aa4:	18c03fcc 	andi	r3,r3,255
   10aa8:	18c0201c 	xori	r3,r3,128
   10aac:	18ffe004 	addi	r3,r3,-128
   10ab0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10ab4:	e0bffb17 	ldw	r2,-20(fp)
   10ab8:	10800d17 	ldw	r2,52(r2)
   10abc:	10800044 	addi	r2,r2,1
   10ac0:	10c1ffcc 	andi	r3,r2,2047
   10ac4:	e0bffb17 	ldw	r2,-20(fp)
   10ac8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10acc:	e0bffa17 	ldw	r2,-24(fp)
   10ad0:	10bfffc4 	addi	r2,r2,-1
   10ad4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10ad8:	e0bffa17 	ldw	r2,-24(fp)
   10adc:	10000526 	beq	r2,zero,10af4 <altera_avalon_jtag_uart_irq+0x1a8>
   10ae0:	e0bffb17 	ldw	r2,-20(fp)
   10ae4:	10c00d17 	ldw	r3,52(r2)
   10ae8:	e0bffb17 	ldw	r2,-20(fp)
   10aec:	10800c17 	ldw	r2,48(r2)
   10af0:	18bfe51e 	bne	r3,r2,10a88 <__alt_data_end+0xffff4a88>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10af4:	e0bffa17 	ldw	r2,-24(fp)
   10af8:	103f9d26 	beq	r2,zero,10970 <__alt_data_end+0xffff4970>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10afc:	e0bffb17 	ldw	r2,-20(fp)
   10b00:	10c00817 	ldw	r3,32(r2)
   10b04:	00bfff44 	movi	r2,-3
   10b08:	1886703a 	and	r3,r3,r2
   10b0c:	e0bffb17 	ldw	r2,-20(fp)
   10b10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10b14:	e0bffb17 	ldw	r2,-20(fp)
   10b18:	10800017 	ldw	r2,0(r2)
   10b1c:	10800104 	addi	r2,r2,4
   10b20:	1007883a 	mov	r3,r2
   10b24:	e0bffb17 	ldw	r2,-20(fp)
   10b28:	10800817 	ldw	r2,32(r2)
   10b2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10b30:	e0bffc17 	ldw	r2,-16(fp)
   10b34:	10800104 	addi	r2,r2,4
   10b38:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10b3c:	003f8c06 	br	10970 <__alt_data_end+0xffff4970>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10b40:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10b44:	0001883a 	nop
   10b48:	e037883a 	mov	sp,fp
   10b4c:	df000017 	ldw	fp,0(sp)
   10b50:	dec00104 	addi	sp,sp,4
   10b54:	f800283a 	ret

00010b58 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10b58:	defff804 	addi	sp,sp,-32
   10b5c:	df000715 	stw	fp,28(sp)
   10b60:	df000704 	addi	fp,sp,28
   10b64:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10b68:	e0bffb17 	ldw	r2,-20(fp)
   10b6c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10b70:	e0bff917 	ldw	r2,-28(fp)
   10b74:	10800017 	ldw	r2,0(r2)
   10b78:	10800104 	addi	r2,r2,4
   10b7c:	10800037 	ldwio	r2,0(r2)
   10b80:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10b84:	e0bffa17 	ldw	r2,-24(fp)
   10b88:	1081000c 	andi	r2,r2,1024
   10b8c:	10000b26 	beq	r2,zero,10bbc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10b90:	e0bff917 	ldw	r2,-28(fp)
   10b94:	10800017 	ldw	r2,0(r2)
   10b98:	10800104 	addi	r2,r2,4
   10b9c:	1007883a 	mov	r3,r2
   10ba0:	e0bff917 	ldw	r2,-28(fp)
   10ba4:	10800817 	ldw	r2,32(r2)
   10ba8:	10810014 	ori	r2,r2,1024
   10bac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10bb0:	e0bff917 	ldw	r2,-28(fp)
   10bb4:	10000915 	stw	zero,36(r2)
   10bb8:	00000a06 	br	10be4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10bbc:	e0bff917 	ldw	r2,-28(fp)
   10bc0:	10c00917 	ldw	r3,36(r2)
   10bc4:	00a00034 	movhi	r2,32768
   10bc8:	10bfff04 	addi	r2,r2,-4
   10bcc:	10c00536 	bltu	r2,r3,10be4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10bd0:	e0bff917 	ldw	r2,-28(fp)
   10bd4:	10800917 	ldw	r2,36(r2)
   10bd8:	10c00044 	addi	r3,r2,1
   10bdc:	e0bff917 	ldw	r2,-28(fp)
   10be0:	10c00915 	stw	r3,36(r2)
   10be4:	d0a5a517 	ldw	r2,-26988(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10be8:	e037883a 	mov	sp,fp
   10bec:	df000017 	ldw	fp,0(sp)
   10bf0:	dec00104 	addi	sp,sp,4
   10bf4:	f800283a 	ret

00010bf8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10bf8:	defffd04 	addi	sp,sp,-12
   10bfc:	df000215 	stw	fp,8(sp)
   10c00:	df000204 	addi	fp,sp,8
   10c04:	e13ffe15 	stw	r4,-8(fp)
   10c08:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10c0c:	00000506 	br	10c24 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10c10:	e0bfff17 	ldw	r2,-4(fp)
   10c14:	1090000c 	andi	r2,r2,16384
   10c18:	10000226 	beq	r2,zero,10c24 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10c1c:	00bffd44 	movi	r2,-11
   10c20:	00000b06 	br	10c50 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10c24:	e0bffe17 	ldw	r2,-8(fp)
   10c28:	10c00d17 	ldw	r3,52(r2)
   10c2c:	e0bffe17 	ldw	r2,-8(fp)
   10c30:	10800c17 	ldw	r2,48(r2)
   10c34:	18800526 	beq	r3,r2,10c4c <altera_avalon_jtag_uart_close+0x54>
   10c38:	e0bffe17 	ldw	r2,-8(fp)
   10c3c:	10c00917 	ldw	r3,36(r2)
   10c40:	e0bffe17 	ldw	r2,-8(fp)
   10c44:	10800117 	ldw	r2,4(r2)
   10c48:	18bff136 	bltu	r3,r2,10c10 <__alt_data_end+0xffff4c10>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10c4c:	0005883a 	mov	r2,zero
}
   10c50:	e037883a 	mov	sp,fp
   10c54:	df000017 	ldw	fp,0(sp)
   10c58:	dec00104 	addi	sp,sp,4
   10c5c:	f800283a 	ret

00010c60 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10c60:	defffa04 	addi	sp,sp,-24
   10c64:	df000515 	stw	fp,20(sp)
   10c68:	df000504 	addi	fp,sp,20
   10c6c:	e13ffd15 	stw	r4,-12(fp)
   10c70:	e17ffe15 	stw	r5,-8(fp)
   10c74:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10c78:	00bff9c4 	movi	r2,-25
   10c7c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10c80:	e0bffe17 	ldw	r2,-8(fp)
   10c84:	10da8060 	cmpeqi	r3,r2,27137
   10c88:	1800031e 	bne	r3,zero,10c98 <altera_avalon_jtag_uart_ioctl+0x38>
   10c8c:	109a80a0 	cmpeqi	r2,r2,27138
   10c90:	1000181e 	bne	r2,zero,10cf4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   10c94:	00002906 	br	10d3c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10c98:	e0bffd17 	ldw	r2,-12(fp)
   10c9c:	10c00117 	ldw	r3,4(r2)
   10ca0:	00a00034 	movhi	r2,32768
   10ca4:	10bfffc4 	addi	r2,r2,-1
   10ca8:	18802126 	beq	r3,r2,10d30 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10cac:	e0bfff17 	ldw	r2,-4(fp)
   10cb0:	10800017 	ldw	r2,0(r2)
   10cb4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10cb8:	e0bffc17 	ldw	r2,-16(fp)
   10cbc:	10800090 	cmplti	r2,r2,2
   10cc0:	1000061e 	bne	r2,zero,10cdc <altera_avalon_jtag_uart_ioctl+0x7c>
   10cc4:	e0fffc17 	ldw	r3,-16(fp)
   10cc8:	00a00034 	movhi	r2,32768
   10ccc:	10bfffc4 	addi	r2,r2,-1
   10cd0:	18800226 	beq	r3,r2,10cdc <altera_avalon_jtag_uart_ioctl+0x7c>
   10cd4:	e0bffc17 	ldw	r2,-16(fp)
   10cd8:	00000206 	br	10ce4 <altera_avalon_jtag_uart_ioctl+0x84>
   10cdc:	00a00034 	movhi	r2,32768
   10ce0:	10bfff84 	addi	r2,r2,-2
   10ce4:	e0fffd17 	ldw	r3,-12(fp)
   10ce8:	18800115 	stw	r2,4(r3)
      rc = 0;
   10cec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10cf0:	00000f06 	br	10d30 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10cf4:	e0bffd17 	ldw	r2,-12(fp)
   10cf8:	10c00117 	ldw	r3,4(r2)
   10cfc:	00a00034 	movhi	r2,32768
   10d00:	10bfffc4 	addi	r2,r2,-1
   10d04:	18800c26 	beq	r3,r2,10d38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10d08:	e0bffd17 	ldw	r2,-12(fp)
   10d0c:	10c00917 	ldw	r3,36(r2)
   10d10:	e0bffd17 	ldw	r2,-12(fp)
   10d14:	10800117 	ldw	r2,4(r2)
   10d18:	1885803a 	cmpltu	r2,r3,r2
   10d1c:	10c03fcc 	andi	r3,r2,255
   10d20:	e0bfff17 	ldw	r2,-4(fp)
   10d24:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10d28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10d2c:	00000206 	br	10d38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10d30:	0001883a 	nop
   10d34:	00000106 	br	10d3c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10d38:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10d3c:	e0bffb17 	ldw	r2,-20(fp)
}
   10d40:	e037883a 	mov	sp,fp
   10d44:	df000017 	ldw	fp,0(sp)
   10d48:	dec00104 	addi	sp,sp,4
   10d4c:	f800283a 	ret

00010d50 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10d50:	defff304 	addi	sp,sp,-52
   10d54:	dfc00c15 	stw	ra,48(sp)
   10d58:	df000b15 	stw	fp,44(sp)
   10d5c:	df000b04 	addi	fp,sp,44
   10d60:	e13ffc15 	stw	r4,-16(fp)
   10d64:	e17ffd15 	stw	r5,-12(fp)
   10d68:	e1bffe15 	stw	r6,-8(fp)
   10d6c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10d70:	e0bffd17 	ldw	r2,-12(fp)
   10d74:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10d78:	00004706 	br	10e98 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10d7c:	e0bffc17 	ldw	r2,-16(fp)
   10d80:	10800a17 	ldw	r2,40(r2)
   10d84:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10d88:	e0bffc17 	ldw	r2,-16(fp)
   10d8c:	10800b17 	ldw	r2,44(r2)
   10d90:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10d94:	e0fff717 	ldw	r3,-36(fp)
   10d98:	e0bff817 	ldw	r2,-32(fp)
   10d9c:	18800536 	bltu	r3,r2,10db4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10da0:	e0fff717 	ldw	r3,-36(fp)
   10da4:	e0bff817 	ldw	r2,-32(fp)
   10da8:	1885c83a 	sub	r2,r3,r2
   10dac:	e0bff615 	stw	r2,-40(fp)
   10db0:	00000406 	br	10dc4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10db4:	00c20004 	movi	r3,2048
   10db8:	e0bff817 	ldw	r2,-32(fp)
   10dbc:	1885c83a 	sub	r2,r3,r2
   10dc0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10dc4:	e0bff617 	ldw	r2,-40(fp)
   10dc8:	10001e26 	beq	r2,zero,10e44 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10dcc:	e0fffe17 	ldw	r3,-8(fp)
   10dd0:	e0bff617 	ldw	r2,-40(fp)
   10dd4:	1880022e 	bgeu	r3,r2,10de0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10dd8:	e0bffe17 	ldw	r2,-8(fp)
   10ddc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10de0:	e0bffc17 	ldw	r2,-16(fp)
   10de4:	10c00e04 	addi	r3,r2,56
   10de8:	e0bff817 	ldw	r2,-32(fp)
   10dec:	1885883a 	add	r2,r3,r2
   10df0:	e1bff617 	ldw	r6,-40(fp)
   10df4:	100b883a 	mov	r5,r2
   10df8:	e13ff517 	ldw	r4,-44(fp)
   10dfc:	00123600 	call	12360 <memcpy>
      ptr   += n;
   10e00:	e0fff517 	ldw	r3,-44(fp)
   10e04:	e0bff617 	ldw	r2,-40(fp)
   10e08:	1885883a 	add	r2,r3,r2
   10e0c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10e10:	e0fffe17 	ldw	r3,-8(fp)
   10e14:	e0bff617 	ldw	r2,-40(fp)
   10e18:	1885c83a 	sub	r2,r3,r2
   10e1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10e20:	e0fff817 	ldw	r3,-32(fp)
   10e24:	e0bff617 	ldw	r2,-40(fp)
   10e28:	1885883a 	add	r2,r3,r2
   10e2c:	10c1ffcc 	andi	r3,r2,2047
   10e30:	e0bffc17 	ldw	r2,-16(fp)
   10e34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10e38:	e0bffe17 	ldw	r2,-8(fp)
   10e3c:	00bfcf16 	blt	zero,r2,10d7c <__alt_data_end+0xffff4d7c>
   10e40:	00000106 	br	10e48 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10e44:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10e48:	e0fff517 	ldw	r3,-44(fp)
   10e4c:	e0bffd17 	ldw	r2,-12(fp)
   10e50:	1880141e 	bne	r3,r2,10ea4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10e54:	e0bfff17 	ldw	r2,-4(fp)
   10e58:	1090000c 	andi	r2,r2,16384
   10e5c:	1000131e 	bne	r2,zero,10eac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10e60:	0001883a 	nop
   10e64:	e0bffc17 	ldw	r2,-16(fp)
   10e68:	10c00a17 	ldw	r3,40(r2)
   10e6c:	e0bff717 	ldw	r2,-36(fp)
   10e70:	1880051e 	bne	r3,r2,10e88 <altera_avalon_jtag_uart_read+0x138>
   10e74:	e0bffc17 	ldw	r2,-16(fp)
   10e78:	10c00917 	ldw	r3,36(r2)
   10e7c:	e0bffc17 	ldw	r2,-16(fp)
   10e80:	10800117 	ldw	r2,4(r2)
   10e84:	18bff736 	bltu	r3,r2,10e64 <__alt_data_end+0xffff4e64>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10e88:	e0bffc17 	ldw	r2,-16(fp)
   10e8c:	10c00a17 	ldw	r3,40(r2)
   10e90:	e0bff717 	ldw	r2,-36(fp)
   10e94:	18800726 	beq	r3,r2,10eb4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10e98:	e0bffe17 	ldw	r2,-8(fp)
   10e9c:	00bfb716 	blt	zero,r2,10d7c <__alt_data_end+0xffff4d7c>
   10ea0:	00000506 	br	10eb8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10ea4:	0001883a 	nop
   10ea8:	00000306 	br	10eb8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10eac:	0001883a 	nop
   10eb0:	00000106 	br	10eb8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10eb4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10eb8:	e0fff517 	ldw	r3,-44(fp)
   10ebc:	e0bffd17 	ldw	r2,-12(fp)
   10ec0:	18801826 	beq	r3,r2,10f24 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ec4:	0005303a 	rdctl	r2,status
   10ec8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ecc:	e0fffb17 	ldw	r3,-20(fp)
   10ed0:	00bfff84 	movi	r2,-2
   10ed4:	1884703a 	and	r2,r3,r2
   10ed8:	1001703a 	wrctl	status,r2
  
  return context;
   10edc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10ee0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10ee4:	e0bffc17 	ldw	r2,-16(fp)
   10ee8:	10800817 	ldw	r2,32(r2)
   10eec:	10c00054 	ori	r3,r2,1
   10ef0:	e0bffc17 	ldw	r2,-16(fp)
   10ef4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10ef8:	e0bffc17 	ldw	r2,-16(fp)
   10efc:	10800017 	ldw	r2,0(r2)
   10f00:	10800104 	addi	r2,r2,4
   10f04:	1007883a 	mov	r3,r2
   10f08:	e0bffc17 	ldw	r2,-16(fp)
   10f0c:	10800817 	ldw	r2,32(r2)
   10f10:	18800035 	stwio	r2,0(r3)
   10f14:	e0bffa17 	ldw	r2,-24(fp)
   10f18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f1c:	e0bff917 	ldw	r2,-28(fp)
   10f20:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10f24:	e0fff517 	ldw	r3,-44(fp)
   10f28:	e0bffd17 	ldw	r2,-12(fp)
   10f2c:	18800426 	beq	r3,r2,10f40 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10f30:	e0fff517 	ldw	r3,-44(fp)
   10f34:	e0bffd17 	ldw	r2,-12(fp)
   10f38:	1885c83a 	sub	r2,r3,r2
   10f3c:	00000606 	br	10f58 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10f40:	e0bfff17 	ldw	r2,-4(fp)
   10f44:	1090000c 	andi	r2,r2,16384
   10f48:	10000226 	beq	r2,zero,10f54 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10f4c:	00bffd44 	movi	r2,-11
   10f50:	00000106 	br	10f58 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10f54:	00bffec4 	movi	r2,-5
}
   10f58:	e037883a 	mov	sp,fp
   10f5c:	dfc00117 	ldw	ra,4(sp)
   10f60:	df000017 	ldw	fp,0(sp)
   10f64:	dec00204 	addi	sp,sp,8
   10f68:	f800283a 	ret

00010f6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10f6c:	defff304 	addi	sp,sp,-52
   10f70:	dfc00c15 	stw	ra,48(sp)
   10f74:	df000b15 	stw	fp,44(sp)
   10f78:	df000b04 	addi	fp,sp,44
   10f7c:	e13ffc15 	stw	r4,-16(fp)
   10f80:	e17ffd15 	stw	r5,-12(fp)
   10f84:	e1bffe15 	stw	r6,-8(fp)
   10f88:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10f8c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10f90:	e0bffd17 	ldw	r2,-12(fp)
   10f94:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10f98:	00003706 	br	11078 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10f9c:	e0bffc17 	ldw	r2,-16(fp)
   10fa0:	10800c17 	ldw	r2,48(r2)
   10fa4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   10fa8:	e0bffc17 	ldw	r2,-16(fp)
   10fac:	10800d17 	ldw	r2,52(r2)
   10fb0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10fb4:	e0fff917 	ldw	r3,-28(fp)
   10fb8:	e0bff517 	ldw	r2,-44(fp)
   10fbc:	1880062e 	bgeu	r3,r2,10fd8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10fc0:	e0fff517 	ldw	r3,-44(fp)
   10fc4:	e0bff917 	ldw	r2,-28(fp)
   10fc8:	1885c83a 	sub	r2,r3,r2
   10fcc:	10bfffc4 	addi	r2,r2,-1
   10fd0:	e0bff615 	stw	r2,-40(fp)
   10fd4:	00000b06 	br	11004 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10fd8:	e0bff517 	ldw	r2,-44(fp)
   10fdc:	10000526 	beq	r2,zero,10ff4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10fe0:	00c20004 	movi	r3,2048
   10fe4:	e0bff917 	ldw	r2,-28(fp)
   10fe8:	1885c83a 	sub	r2,r3,r2
   10fec:	e0bff615 	stw	r2,-40(fp)
   10ff0:	00000406 	br	11004 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10ff4:	00c1ffc4 	movi	r3,2047
   10ff8:	e0bff917 	ldw	r2,-28(fp)
   10ffc:	1885c83a 	sub	r2,r3,r2
   11000:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11004:	e0bff617 	ldw	r2,-40(fp)
   11008:	10001e26 	beq	r2,zero,11084 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1100c:	e0fffe17 	ldw	r3,-8(fp)
   11010:	e0bff617 	ldw	r2,-40(fp)
   11014:	1880022e 	bgeu	r3,r2,11020 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   11018:	e0bffe17 	ldw	r2,-8(fp)
   1101c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11020:	e0bffc17 	ldw	r2,-16(fp)
   11024:	10c20e04 	addi	r3,r2,2104
   11028:	e0bff917 	ldw	r2,-28(fp)
   1102c:	1885883a 	add	r2,r3,r2
   11030:	e1bff617 	ldw	r6,-40(fp)
   11034:	e17ffd17 	ldw	r5,-12(fp)
   11038:	1009883a 	mov	r4,r2
   1103c:	00123600 	call	12360 <memcpy>
      ptr   += n;
   11040:	e0fffd17 	ldw	r3,-12(fp)
   11044:	e0bff617 	ldw	r2,-40(fp)
   11048:	1885883a 	add	r2,r3,r2
   1104c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11050:	e0fffe17 	ldw	r3,-8(fp)
   11054:	e0bff617 	ldw	r2,-40(fp)
   11058:	1885c83a 	sub	r2,r3,r2
   1105c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11060:	e0fff917 	ldw	r3,-28(fp)
   11064:	e0bff617 	ldw	r2,-40(fp)
   11068:	1885883a 	add	r2,r3,r2
   1106c:	10c1ffcc 	andi	r3,r2,2047
   11070:	e0bffc17 	ldw	r2,-16(fp)
   11074:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11078:	e0bffe17 	ldw	r2,-8(fp)
   1107c:	00bfc716 	blt	zero,r2,10f9c <__alt_data_end+0xffff4f9c>
   11080:	00000106 	br	11088 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   11084:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11088:	0005303a 	rdctl	r2,status
   1108c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11090:	e0fffb17 	ldw	r3,-20(fp)
   11094:	00bfff84 	movi	r2,-2
   11098:	1884703a 	and	r2,r3,r2
   1109c:	1001703a 	wrctl	status,r2
  
  return context;
   110a0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   110a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   110a8:	e0bffc17 	ldw	r2,-16(fp)
   110ac:	10800817 	ldw	r2,32(r2)
   110b0:	10c00094 	ori	r3,r2,2
   110b4:	e0bffc17 	ldw	r2,-16(fp)
   110b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   110bc:	e0bffc17 	ldw	r2,-16(fp)
   110c0:	10800017 	ldw	r2,0(r2)
   110c4:	10800104 	addi	r2,r2,4
   110c8:	1007883a 	mov	r3,r2
   110cc:	e0bffc17 	ldw	r2,-16(fp)
   110d0:	10800817 	ldw	r2,32(r2)
   110d4:	18800035 	stwio	r2,0(r3)
   110d8:	e0bffa17 	ldw	r2,-24(fp)
   110dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   110e0:	e0bff817 	ldw	r2,-32(fp)
   110e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   110e8:	e0bffe17 	ldw	r2,-8(fp)
   110ec:	0080100e 	bge	zero,r2,11130 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   110f0:	e0bfff17 	ldw	r2,-4(fp)
   110f4:	1090000c 	andi	r2,r2,16384
   110f8:	1000101e 	bne	r2,zero,1113c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   110fc:	0001883a 	nop
   11100:	e0bffc17 	ldw	r2,-16(fp)
   11104:	10c00d17 	ldw	r3,52(r2)
   11108:	e0bff517 	ldw	r2,-44(fp)
   1110c:	1880051e 	bne	r3,r2,11124 <altera_avalon_jtag_uart_write+0x1b8>
   11110:	e0bffc17 	ldw	r2,-16(fp)
   11114:	10c00917 	ldw	r3,36(r2)
   11118:	e0bffc17 	ldw	r2,-16(fp)
   1111c:	10800117 	ldw	r2,4(r2)
   11120:	18bff736 	bltu	r3,r2,11100 <__alt_data_end+0xffff5100>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11124:	e0bffc17 	ldw	r2,-16(fp)
   11128:	10800917 	ldw	r2,36(r2)
   1112c:	1000051e 	bne	r2,zero,11144 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   11130:	e0bffe17 	ldw	r2,-8(fp)
   11134:	00bfd016 	blt	zero,r2,11078 <__alt_data_end+0xffff5078>
   11138:	00000306 	br	11148 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1113c:	0001883a 	nop
   11140:	00000106 	br	11148 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   11144:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11148:	e0fffd17 	ldw	r3,-12(fp)
   1114c:	e0bff717 	ldw	r2,-36(fp)
   11150:	18800426 	beq	r3,r2,11164 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   11154:	e0fffd17 	ldw	r3,-12(fp)
   11158:	e0bff717 	ldw	r2,-36(fp)
   1115c:	1885c83a 	sub	r2,r3,r2
   11160:	00000606 	br	1117c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   11164:	e0bfff17 	ldw	r2,-4(fp)
   11168:	1090000c 	andi	r2,r2,16384
   1116c:	10000226 	beq	r2,zero,11178 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   11170:	00bffd44 	movi	r2,-11
   11174:	00000106 	br	1117c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11178:	00bffec4 	movi	r2,-5
}
   1117c:	e037883a 	mov	sp,fp
   11180:	dfc00117 	ldw	ra,4(sp)
   11184:	df000017 	ldw	fp,0(sp)
   11188:	dec00204 	addi	sp,sp,8
   1118c:	f800283a 	ret

00011190 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   11190:	defffa04 	addi	sp,sp,-24
   11194:	dfc00515 	stw	ra,20(sp)
   11198:	df000415 	stw	fp,16(sp)
   1119c:	df000404 	addi	fp,sp,16
   111a0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   111a4:	0007883a 	mov	r3,zero
   111a8:	e0bfff17 	ldw	r2,-4(fp)
   111ac:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   111b0:	e0bfff17 	ldw	r2,-4(fp)
   111b4:	10800104 	addi	r2,r2,4
   111b8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111bc:	0005303a 	rdctl	r2,status
   111c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111c4:	e0fffd17 	ldw	r3,-12(fp)
   111c8:	00bfff84 	movi	r2,-2
   111cc:	1884703a 	and	r2,r3,r2
   111d0:	1001703a 	wrctl	status,r2
  
  return context;
   111d4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   111d8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   111dc:	0011e740 	call	11e74 <alt_tick>
   111e0:	e0bffc17 	ldw	r2,-16(fp)
   111e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111e8:	e0bffe17 	ldw	r2,-8(fp)
   111ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   111f0:	0001883a 	nop
   111f4:	e037883a 	mov	sp,fp
   111f8:	dfc00117 	ldw	ra,4(sp)
   111fc:	df000017 	ldw	fp,0(sp)
   11200:	dec00204 	addi	sp,sp,8
   11204:	f800283a 	ret

00011208 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11208:	defff804 	addi	sp,sp,-32
   1120c:	dfc00715 	stw	ra,28(sp)
   11210:	df000615 	stw	fp,24(sp)
   11214:	df000604 	addi	fp,sp,24
   11218:	e13ffc15 	stw	r4,-16(fp)
   1121c:	e17ffd15 	stw	r5,-12(fp)
   11220:	e1bffe15 	stw	r6,-8(fp)
   11224:	e1ffff15 	stw	r7,-4(fp)
   11228:	e0bfff17 	ldw	r2,-4(fp)
   1122c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11230:	d0a5a517 	ldw	r2,-26988(gp)
   11234:	1000021e 	bne	r2,zero,11240 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   11238:	e0bffb17 	ldw	r2,-20(fp)
   1123c:	d0a5a515 	stw	r2,-26988(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11240:	e0bffc17 	ldw	r2,-16(fp)
   11244:	10800104 	addi	r2,r2,4
   11248:	00c001c4 	movi	r3,7
   1124c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   11250:	d8000015 	stw	zero,0(sp)
   11254:	e1fffc17 	ldw	r7,-16(fp)
   11258:	01800074 	movhi	r6,1
   1125c:	31846404 	addi	r6,r6,4496
   11260:	e17ffe17 	ldw	r5,-8(fp)
   11264:	e13ffd17 	ldw	r4,-12(fp)
   11268:	00116d00 	call	116d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1126c:	0001883a 	nop
   11270:	e037883a 	mov	sp,fp
   11274:	dfc00117 	ldw	ra,4(sp)
   11278:	df000017 	ldw	fp,0(sp)
   1127c:	dec00204 	addi	sp,sp,8
   11280:	f800283a 	ret

00011284 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11284:	defff504 	addi	sp,sp,-44
   11288:	df000a15 	stw	fp,40(sp)
   1128c:	df000a04 	addi	fp,sp,40
   11290:	e13ffc15 	stw	r4,-16(fp)
   11294:	e17ffd15 	stw	r5,-12(fp)
   11298:	e1bffe15 	stw	r6,-8(fp)
   1129c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   112a0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   112a4:	d0a5a517 	ldw	r2,-26988(gp)
  
  if (alt_ticks_per_second ())
   112a8:	10003c26 	beq	r2,zero,1139c <alt_alarm_start+0x118>
  {
    if (alarm)
   112ac:	e0bffc17 	ldw	r2,-16(fp)
   112b0:	10003826 	beq	r2,zero,11394 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   112b4:	e0bffc17 	ldw	r2,-16(fp)
   112b8:	e0fffe17 	ldw	r3,-8(fp)
   112bc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   112c0:	e0bffc17 	ldw	r2,-16(fp)
   112c4:	e0ffff17 	ldw	r3,-4(fp)
   112c8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112cc:	0005303a 	rdctl	r2,status
   112d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112d4:	e0fff917 	ldw	r3,-28(fp)
   112d8:	00bfff84 	movi	r2,-2
   112dc:	1884703a 	and	r2,r3,r2
   112e0:	1001703a 	wrctl	status,r2
  
  return context;
   112e4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   112e8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   112ec:	d0a5a617 	ldw	r2,-26984(gp)
      
      current_nticks = alt_nticks();
   112f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   112f4:	e0fffd17 	ldw	r3,-12(fp)
   112f8:	e0bff617 	ldw	r2,-40(fp)
   112fc:	1885883a 	add	r2,r3,r2
   11300:	10c00044 	addi	r3,r2,1
   11304:	e0bffc17 	ldw	r2,-16(fp)
   11308:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1130c:	e0bffc17 	ldw	r2,-16(fp)
   11310:	10c00217 	ldw	r3,8(r2)
   11314:	e0bff617 	ldw	r2,-40(fp)
   11318:	1880042e 	bgeu	r3,r2,1132c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1131c:	e0bffc17 	ldw	r2,-16(fp)
   11320:	00c00044 	movi	r3,1
   11324:	10c00405 	stb	r3,16(r2)
   11328:	00000206 	br	11334 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1132c:	e0bffc17 	ldw	r2,-16(fp)
   11330:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11334:	e0bffc17 	ldw	r2,-16(fp)
   11338:	d0e00704 	addi	r3,gp,-32740
   1133c:	e0fffa15 	stw	r3,-24(fp)
   11340:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11344:	e0bffb17 	ldw	r2,-20(fp)
   11348:	e0fffa17 	ldw	r3,-24(fp)
   1134c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11350:	e0bffa17 	ldw	r2,-24(fp)
   11354:	10c00017 	ldw	r3,0(r2)
   11358:	e0bffb17 	ldw	r2,-20(fp)
   1135c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11360:	e0bffa17 	ldw	r2,-24(fp)
   11364:	10800017 	ldw	r2,0(r2)
   11368:	e0fffb17 	ldw	r3,-20(fp)
   1136c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11370:	e0bffa17 	ldw	r2,-24(fp)
   11374:	e0fffb17 	ldw	r3,-20(fp)
   11378:	10c00015 	stw	r3,0(r2)
   1137c:	e0bff817 	ldw	r2,-32(fp)
   11380:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11384:	e0bff717 	ldw	r2,-36(fp)
   11388:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1138c:	0005883a 	mov	r2,zero
   11390:	00000306 	br	113a0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11394:	00bffa84 	movi	r2,-22
   11398:	00000106 	br	113a0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1139c:	00bfde84 	movi	r2,-134
  }
}
   113a0:	e037883a 	mov	sp,fp
   113a4:	df000017 	ldw	fp,0(sp)
   113a8:	dec00104 	addi	sp,sp,4
   113ac:	f800283a 	ret

000113b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   113b0:	defffe04 	addi	sp,sp,-8
   113b4:	dfc00115 	stw	ra,4(sp)
   113b8:	df000015 	stw	fp,0(sp)
   113bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   113c0:	d0a00517 	ldw	r2,-32748(gp)
   113c4:	10000326 	beq	r2,zero,113d4 <alt_get_errno+0x24>
   113c8:	d0a00517 	ldw	r2,-32748(gp)
   113cc:	103ee83a 	callr	r2
   113d0:	00000106 	br	113d8 <alt_get_errno+0x28>
   113d4:	d0a5a804 	addi	r2,gp,-26976
}
   113d8:	e037883a 	mov	sp,fp
   113dc:	dfc00117 	ldw	ra,4(sp)
   113e0:	df000017 	ldw	fp,0(sp)
   113e4:	dec00204 	addi	sp,sp,8
   113e8:	f800283a 	ret

000113ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   113ec:	defffb04 	addi	sp,sp,-20
   113f0:	dfc00415 	stw	ra,16(sp)
   113f4:	df000315 	stw	fp,12(sp)
   113f8:	df000304 	addi	fp,sp,12
   113fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11400:	e0bfff17 	ldw	r2,-4(fp)
   11404:	10000816 	blt	r2,zero,11428 <close+0x3c>
   11408:	01400304 	movi	r5,12
   1140c:	e13fff17 	ldw	r4,-4(fp)
   11410:	00104c80 	call	104c8 <__mulsi3>
   11414:	1007883a 	mov	r3,r2
   11418:	00800074 	movhi	r2,1
   1141c:	108e3304 	addi	r2,r2,14540
   11420:	1885883a 	add	r2,r3,r2
   11424:	00000106 	br	1142c <close+0x40>
   11428:	0005883a 	mov	r2,zero
   1142c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11430:	e0bffd17 	ldw	r2,-12(fp)
   11434:	10001926 	beq	r2,zero,1149c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11438:	e0bffd17 	ldw	r2,-12(fp)
   1143c:	10800017 	ldw	r2,0(r2)
   11440:	10800417 	ldw	r2,16(r2)
   11444:	10000626 	beq	r2,zero,11460 <close+0x74>
   11448:	e0bffd17 	ldw	r2,-12(fp)
   1144c:	10800017 	ldw	r2,0(r2)
   11450:	10800417 	ldw	r2,16(r2)
   11454:	e13ffd17 	ldw	r4,-12(fp)
   11458:	103ee83a 	callr	r2
   1145c:	00000106 	br	11464 <close+0x78>
   11460:	0005883a 	mov	r2,zero
   11464:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11468:	e13fff17 	ldw	r4,-4(fp)
   1146c:	0011d540 	call	11d54 <alt_release_fd>
    if (rval < 0)
   11470:	e0bffe17 	ldw	r2,-8(fp)
   11474:	1000070e 	bge	r2,zero,11494 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11478:	00113b00 	call	113b0 <alt_get_errno>
   1147c:	1007883a 	mov	r3,r2
   11480:	e0bffe17 	ldw	r2,-8(fp)
   11484:	0085c83a 	sub	r2,zero,r2
   11488:	18800015 	stw	r2,0(r3)
      return -1;
   1148c:	00bfffc4 	movi	r2,-1
   11490:	00000706 	br	114b0 <close+0xc4>
    }
    return 0;
   11494:	0005883a 	mov	r2,zero
   11498:	00000506 	br	114b0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1149c:	00113b00 	call	113b0 <alt_get_errno>
   114a0:	1007883a 	mov	r3,r2
   114a4:	00801444 	movi	r2,81
   114a8:	18800015 	stw	r2,0(r3)
    return -1;
   114ac:	00bfffc4 	movi	r2,-1
  }
}
   114b0:	e037883a 	mov	sp,fp
   114b4:	dfc00117 	ldw	ra,4(sp)
   114b8:	df000017 	ldw	fp,0(sp)
   114bc:	dec00204 	addi	sp,sp,8
   114c0:	f800283a 	ret

000114c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   114c4:	deffff04 	addi	sp,sp,-4
   114c8:	df000015 	stw	fp,0(sp)
   114cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   114d0:	0001883a 	nop
   114d4:	e037883a 	mov	sp,fp
   114d8:	df000017 	ldw	fp,0(sp)
   114dc:	dec00104 	addi	sp,sp,4
   114e0:	f800283a 	ret

000114e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   114e4:	defffc04 	addi	sp,sp,-16
   114e8:	df000315 	stw	fp,12(sp)
   114ec:	df000304 	addi	fp,sp,12
   114f0:	e13ffd15 	stw	r4,-12(fp)
   114f4:	e17ffe15 	stw	r5,-8(fp)
   114f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   114fc:	e0bfff17 	ldw	r2,-4(fp)
}
   11500:	e037883a 	mov	sp,fp
   11504:	df000017 	ldw	fp,0(sp)
   11508:	dec00104 	addi	sp,sp,4
   1150c:	f800283a 	ret

00011510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11510:	defffe04 	addi	sp,sp,-8
   11514:	dfc00115 	stw	ra,4(sp)
   11518:	df000015 	stw	fp,0(sp)
   1151c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11520:	d0a00517 	ldw	r2,-32748(gp)
   11524:	10000326 	beq	r2,zero,11534 <alt_get_errno+0x24>
   11528:	d0a00517 	ldw	r2,-32748(gp)
   1152c:	103ee83a 	callr	r2
   11530:	00000106 	br	11538 <alt_get_errno+0x28>
   11534:	d0a5a804 	addi	r2,gp,-26976
}
   11538:	e037883a 	mov	sp,fp
   1153c:	dfc00117 	ldw	ra,4(sp)
   11540:	df000017 	ldw	fp,0(sp)
   11544:	dec00204 	addi	sp,sp,8
   11548:	f800283a 	ret

0001154c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1154c:	defffa04 	addi	sp,sp,-24
   11550:	dfc00515 	stw	ra,20(sp)
   11554:	df000415 	stw	fp,16(sp)
   11558:	df000404 	addi	fp,sp,16
   1155c:	e13ffe15 	stw	r4,-8(fp)
   11560:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11564:	e0bffe17 	ldw	r2,-8(fp)
   11568:	10000326 	beq	r2,zero,11578 <alt_dev_llist_insert+0x2c>
   1156c:	e0bffe17 	ldw	r2,-8(fp)
   11570:	10800217 	ldw	r2,8(r2)
   11574:	1000061e 	bne	r2,zero,11590 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11578:	00115100 	call	11510 <alt_get_errno>
   1157c:	1007883a 	mov	r3,r2
   11580:	00800584 	movi	r2,22
   11584:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11588:	00bffa84 	movi	r2,-22
   1158c:	00001306 	br	115dc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11590:	e0bffe17 	ldw	r2,-8(fp)
   11594:	e0ffff17 	ldw	r3,-4(fp)
   11598:	e0fffc15 	stw	r3,-16(fp)
   1159c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   115a0:	e0bffd17 	ldw	r2,-12(fp)
   115a4:	e0fffc17 	ldw	r3,-16(fp)
   115a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   115ac:	e0bffc17 	ldw	r2,-16(fp)
   115b0:	10c00017 	ldw	r3,0(r2)
   115b4:	e0bffd17 	ldw	r2,-12(fp)
   115b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   115bc:	e0bffc17 	ldw	r2,-16(fp)
   115c0:	10800017 	ldw	r2,0(r2)
   115c4:	e0fffd17 	ldw	r3,-12(fp)
   115c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   115cc:	e0bffc17 	ldw	r2,-16(fp)
   115d0:	e0fffd17 	ldw	r3,-12(fp)
   115d4:	10c00015 	stw	r3,0(r2)

  return 0;  
   115d8:	0005883a 	mov	r2,zero
}
   115dc:	e037883a 	mov	sp,fp
   115e0:	dfc00117 	ldw	ra,4(sp)
   115e4:	df000017 	ldw	fp,0(sp)
   115e8:	dec00204 	addi	sp,sp,8
   115ec:	f800283a 	ret

000115f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   115f0:	defffd04 	addi	sp,sp,-12
   115f4:	dfc00215 	stw	ra,8(sp)
   115f8:	df000115 	stw	fp,4(sp)
   115fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11600:	00800074 	movhi	r2,1
   11604:	108a0204 	addi	r2,r2,10248
   11608:	e0bfff15 	stw	r2,-4(fp)
   1160c:	00000606 	br	11628 <_do_ctors+0x38>
        (*ctor) (); 
   11610:	e0bfff17 	ldw	r2,-4(fp)
   11614:	10800017 	ldw	r2,0(r2)
   11618:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1161c:	e0bfff17 	ldw	r2,-4(fp)
   11620:	10bfff04 	addi	r2,r2,-4
   11624:	e0bfff15 	stw	r2,-4(fp)
   11628:	e0ffff17 	ldw	r3,-4(fp)
   1162c:	00800074 	movhi	r2,1
   11630:	108a0304 	addi	r2,r2,10252
   11634:	18bff62e 	bgeu	r3,r2,11610 <__alt_data_end+0xffff5610>
        (*ctor) (); 
}
   11638:	0001883a 	nop
   1163c:	e037883a 	mov	sp,fp
   11640:	dfc00117 	ldw	ra,4(sp)
   11644:	df000017 	ldw	fp,0(sp)
   11648:	dec00204 	addi	sp,sp,8
   1164c:	f800283a 	ret

00011650 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11650:	defffd04 	addi	sp,sp,-12
   11654:	dfc00215 	stw	ra,8(sp)
   11658:	df000115 	stw	fp,4(sp)
   1165c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11660:	00800074 	movhi	r2,1
   11664:	108a0204 	addi	r2,r2,10248
   11668:	e0bfff15 	stw	r2,-4(fp)
   1166c:	00000606 	br	11688 <_do_dtors+0x38>
        (*dtor) (); 
   11670:	e0bfff17 	ldw	r2,-4(fp)
   11674:	10800017 	ldw	r2,0(r2)
   11678:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1167c:	e0bfff17 	ldw	r2,-4(fp)
   11680:	10bfff04 	addi	r2,r2,-4
   11684:	e0bfff15 	stw	r2,-4(fp)
   11688:	e0ffff17 	ldw	r3,-4(fp)
   1168c:	00800074 	movhi	r2,1
   11690:	108a0304 	addi	r2,r2,10252
   11694:	18bff62e 	bgeu	r3,r2,11670 <__alt_data_end+0xffff5670>
        (*dtor) (); 
}
   11698:	0001883a 	nop
   1169c:	e037883a 	mov	sp,fp
   116a0:	dfc00117 	ldw	ra,4(sp)
   116a4:	df000017 	ldw	fp,0(sp)
   116a8:	dec00204 	addi	sp,sp,8
   116ac:	f800283a 	ret

000116b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   116b0:	deffff04 	addi	sp,sp,-4
   116b4:	df000015 	stw	fp,0(sp)
   116b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   116bc:	0001883a 	nop
   116c0:	e037883a 	mov	sp,fp
   116c4:	df000017 	ldw	fp,0(sp)
   116c8:	dec00104 	addi	sp,sp,4
   116cc:	f800283a 	ret

000116d0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   116d0:	defff904 	addi	sp,sp,-28
   116d4:	dfc00615 	stw	ra,24(sp)
   116d8:	df000515 	stw	fp,20(sp)
   116dc:	df000504 	addi	fp,sp,20
   116e0:	e13ffc15 	stw	r4,-16(fp)
   116e4:	e17ffd15 	stw	r5,-12(fp)
   116e8:	e1bffe15 	stw	r6,-8(fp)
   116ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   116f0:	e0800217 	ldw	r2,8(fp)
   116f4:	d8800015 	stw	r2,0(sp)
   116f8:	e1ffff17 	ldw	r7,-4(fp)
   116fc:	e1bffe17 	ldw	r6,-8(fp)
   11700:	e17ffd17 	ldw	r5,-12(fp)
   11704:	e13ffc17 	ldw	r4,-16(fp)
   11708:	00118800 	call	11880 <alt_iic_isr_register>
}  
   1170c:	e037883a 	mov	sp,fp
   11710:	dfc00117 	ldw	ra,4(sp)
   11714:	df000017 	ldw	fp,0(sp)
   11718:	dec00204 	addi	sp,sp,8
   1171c:	f800283a 	ret

00011720 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   11720:	defff904 	addi	sp,sp,-28
   11724:	df000615 	stw	fp,24(sp)
   11728:	df000604 	addi	fp,sp,24
   1172c:	e13ffe15 	stw	r4,-8(fp)
   11730:	e17fff15 	stw	r5,-4(fp)
   11734:	e0bfff17 	ldw	r2,-4(fp)
   11738:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1173c:	0005303a 	rdctl	r2,status
   11740:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11744:	e0fffb17 	ldw	r3,-20(fp)
   11748:	00bfff84 	movi	r2,-2
   1174c:	1884703a 	and	r2,r3,r2
   11750:	1001703a 	wrctl	status,r2
  
  return context;
   11754:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11758:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1175c:	00c00044 	movi	r3,1
   11760:	e0bffa17 	ldw	r2,-24(fp)
   11764:	1884983a 	sll	r2,r3,r2
   11768:	1007883a 	mov	r3,r2
   1176c:	d0a5a417 	ldw	r2,-26992(gp)
   11770:	1884b03a 	or	r2,r3,r2
   11774:	d0a5a415 	stw	r2,-26992(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11778:	d0a5a417 	ldw	r2,-26992(gp)
   1177c:	100170fa 	wrctl	ienable,r2
   11780:	e0bffc17 	ldw	r2,-16(fp)
   11784:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11788:	e0bffd17 	ldw	r2,-12(fp)
   1178c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11790:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11794:	0001883a 	nop
}
   11798:	e037883a 	mov	sp,fp
   1179c:	df000017 	ldw	fp,0(sp)
   117a0:	dec00104 	addi	sp,sp,4
   117a4:	f800283a 	ret

000117a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   117a8:	defff904 	addi	sp,sp,-28
   117ac:	df000615 	stw	fp,24(sp)
   117b0:	df000604 	addi	fp,sp,24
   117b4:	e13ffe15 	stw	r4,-8(fp)
   117b8:	e17fff15 	stw	r5,-4(fp)
   117bc:	e0bfff17 	ldw	r2,-4(fp)
   117c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117c4:	0005303a 	rdctl	r2,status
   117c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117cc:	e0fffb17 	ldw	r3,-20(fp)
   117d0:	00bfff84 	movi	r2,-2
   117d4:	1884703a 	and	r2,r3,r2
   117d8:	1001703a 	wrctl	status,r2
  
  return context;
   117dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   117e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   117e4:	00c00044 	movi	r3,1
   117e8:	e0bffa17 	ldw	r2,-24(fp)
   117ec:	1884983a 	sll	r2,r3,r2
   117f0:	0084303a 	nor	r2,zero,r2
   117f4:	1007883a 	mov	r3,r2
   117f8:	d0a5a417 	ldw	r2,-26992(gp)
   117fc:	1884703a 	and	r2,r3,r2
   11800:	d0a5a415 	stw	r2,-26992(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11804:	d0a5a417 	ldw	r2,-26992(gp)
   11808:	100170fa 	wrctl	ienable,r2
   1180c:	e0bffc17 	ldw	r2,-16(fp)
   11810:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11814:	e0bffd17 	ldw	r2,-12(fp)
   11818:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1181c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11820:	0001883a 	nop
}
   11824:	e037883a 	mov	sp,fp
   11828:	df000017 	ldw	fp,0(sp)
   1182c:	dec00104 	addi	sp,sp,4
   11830:	f800283a 	ret

00011834 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11834:	defffc04 	addi	sp,sp,-16
   11838:	df000315 	stw	fp,12(sp)
   1183c:	df000304 	addi	fp,sp,12
   11840:	e13ffe15 	stw	r4,-8(fp)
   11844:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11848:	000530fa 	rdctl	r2,ienable
   1184c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11850:	00c00044 	movi	r3,1
   11854:	e0bfff17 	ldw	r2,-4(fp)
   11858:	1884983a 	sll	r2,r3,r2
   1185c:	1007883a 	mov	r3,r2
   11860:	e0bffd17 	ldw	r2,-12(fp)
   11864:	1884703a 	and	r2,r3,r2
   11868:	1004c03a 	cmpne	r2,r2,zero
   1186c:	10803fcc 	andi	r2,r2,255
}
   11870:	e037883a 	mov	sp,fp
   11874:	df000017 	ldw	fp,0(sp)
   11878:	dec00104 	addi	sp,sp,4
   1187c:	f800283a 	ret

00011880 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11880:	defff504 	addi	sp,sp,-44
   11884:	dfc00a15 	stw	ra,40(sp)
   11888:	df000915 	stw	fp,36(sp)
   1188c:	df000904 	addi	fp,sp,36
   11890:	e13ffc15 	stw	r4,-16(fp)
   11894:	e17ffd15 	stw	r5,-12(fp)
   11898:	e1bffe15 	stw	r6,-8(fp)
   1189c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   118a0:	00bffa84 	movi	r2,-22
   118a4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   118a8:	e0bffd17 	ldw	r2,-12(fp)
   118ac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   118b0:	e0bff817 	ldw	r2,-32(fp)
   118b4:	10800808 	cmpgei	r2,r2,32
   118b8:	1000271e 	bne	r2,zero,11958 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118bc:	0005303a 	rdctl	r2,status
   118c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118c4:	e0fffb17 	ldw	r3,-20(fp)
   118c8:	00bfff84 	movi	r2,-2
   118cc:	1884703a 	and	r2,r3,r2
   118d0:	1001703a 	wrctl	status,r2
  
  return context;
   118d4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   118d8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   118dc:	00800074 	movhi	r2,1
   118e0:	10954504 	addi	r2,r2,21780
   118e4:	e0fff817 	ldw	r3,-32(fp)
   118e8:	180690fa 	slli	r3,r3,3
   118ec:	10c5883a 	add	r2,r2,r3
   118f0:	e0fffe17 	ldw	r3,-8(fp)
   118f4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   118f8:	00800074 	movhi	r2,1
   118fc:	10954504 	addi	r2,r2,21780
   11900:	e0fff817 	ldw	r3,-32(fp)
   11904:	180690fa 	slli	r3,r3,3
   11908:	10c5883a 	add	r2,r2,r3
   1190c:	10800104 	addi	r2,r2,4
   11910:	e0ffff17 	ldw	r3,-4(fp)
   11914:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11918:	e0bffe17 	ldw	r2,-8(fp)
   1191c:	10000526 	beq	r2,zero,11934 <alt_iic_isr_register+0xb4>
   11920:	e0bff817 	ldw	r2,-32(fp)
   11924:	100b883a 	mov	r5,r2
   11928:	e13ffc17 	ldw	r4,-16(fp)
   1192c:	00117200 	call	11720 <alt_ic_irq_enable>
   11930:	00000406 	br	11944 <alt_iic_isr_register+0xc4>
   11934:	e0bff817 	ldw	r2,-32(fp)
   11938:	100b883a 	mov	r5,r2
   1193c:	e13ffc17 	ldw	r4,-16(fp)
   11940:	00117a80 	call	117a8 <alt_ic_irq_disable>
   11944:	e0bff715 	stw	r2,-36(fp)
   11948:	e0bffa17 	ldw	r2,-24(fp)
   1194c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11950:	e0bff917 	ldw	r2,-28(fp)
   11954:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11958:	e0bff717 	ldw	r2,-36(fp)
}
   1195c:	e037883a 	mov	sp,fp
   11960:	dfc00117 	ldw	ra,4(sp)
   11964:	df000017 	ldw	fp,0(sp)
   11968:	dec00204 	addi	sp,sp,8
   1196c:	f800283a 	ret

00011970 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11970:	defff804 	addi	sp,sp,-32
   11974:	dfc00715 	stw	ra,28(sp)
   11978:	df000615 	stw	fp,24(sp)
   1197c:	dc000515 	stw	r16,20(sp)
   11980:	df000604 	addi	fp,sp,24
   11984:	e13ffb15 	stw	r4,-20(fp)
   11988:	e17ffc15 	stw	r5,-16(fp)
   1198c:	e1bffd15 	stw	r6,-12(fp)
   11990:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11994:	e1bffe17 	ldw	r6,-8(fp)
   11998:	e17ffd17 	ldw	r5,-12(fp)
   1199c:	e13ffc17 	ldw	r4,-16(fp)
   119a0:	0011bf80 	call	11bf8 <open>
   119a4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   119a8:	e0bffa17 	ldw	r2,-24(fp)
   119ac:	10002216 	blt	r2,zero,11a38 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   119b0:	04000074 	movhi	r16,1
   119b4:	840e3304 	addi	r16,r16,14540
   119b8:	e0bffa17 	ldw	r2,-24(fp)
   119bc:	01400304 	movi	r5,12
   119c0:	1009883a 	mov	r4,r2
   119c4:	00104c80 	call	104c8 <__mulsi3>
   119c8:	8085883a 	add	r2,r16,r2
   119cc:	10c00017 	ldw	r3,0(r2)
   119d0:	e0bffb17 	ldw	r2,-20(fp)
   119d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   119d8:	04000074 	movhi	r16,1
   119dc:	840e3304 	addi	r16,r16,14540
   119e0:	e0bffa17 	ldw	r2,-24(fp)
   119e4:	01400304 	movi	r5,12
   119e8:	1009883a 	mov	r4,r2
   119ec:	00104c80 	call	104c8 <__mulsi3>
   119f0:	8085883a 	add	r2,r16,r2
   119f4:	10800104 	addi	r2,r2,4
   119f8:	10c00017 	ldw	r3,0(r2)
   119fc:	e0bffb17 	ldw	r2,-20(fp)
   11a00:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11a04:	04000074 	movhi	r16,1
   11a08:	840e3304 	addi	r16,r16,14540
   11a0c:	e0bffa17 	ldw	r2,-24(fp)
   11a10:	01400304 	movi	r5,12
   11a14:	1009883a 	mov	r4,r2
   11a18:	00104c80 	call	104c8 <__mulsi3>
   11a1c:	8085883a 	add	r2,r16,r2
   11a20:	10800204 	addi	r2,r2,8
   11a24:	10c00017 	ldw	r3,0(r2)
   11a28:	e0bffb17 	ldw	r2,-20(fp)
   11a2c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11a30:	e13ffa17 	ldw	r4,-24(fp)
   11a34:	0011d540 	call	11d54 <alt_release_fd>
  }
} 
   11a38:	0001883a 	nop
   11a3c:	e6ffff04 	addi	sp,fp,-4
   11a40:	dfc00217 	ldw	ra,8(sp)
   11a44:	df000117 	ldw	fp,4(sp)
   11a48:	dc000017 	ldw	r16,0(sp)
   11a4c:	dec00304 	addi	sp,sp,12
   11a50:	f800283a 	ret

00011a54 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11a54:	defffb04 	addi	sp,sp,-20
   11a58:	dfc00415 	stw	ra,16(sp)
   11a5c:	df000315 	stw	fp,12(sp)
   11a60:	df000304 	addi	fp,sp,12
   11a64:	e13ffd15 	stw	r4,-12(fp)
   11a68:	e17ffe15 	stw	r5,-8(fp)
   11a6c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11a70:	01c07fc4 	movi	r7,511
   11a74:	01800044 	movi	r6,1
   11a78:	e17ffd17 	ldw	r5,-12(fp)
   11a7c:	01000074 	movhi	r4,1
   11a80:	210e3604 	addi	r4,r4,14552
   11a84:	00119700 	call	11970 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11a88:	01c07fc4 	movi	r7,511
   11a8c:	000d883a 	mov	r6,zero
   11a90:	e17ffe17 	ldw	r5,-8(fp)
   11a94:	01000074 	movhi	r4,1
   11a98:	210e3304 	addi	r4,r4,14540
   11a9c:	00119700 	call	11970 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11aa0:	01c07fc4 	movi	r7,511
   11aa4:	01800044 	movi	r6,1
   11aa8:	e17fff17 	ldw	r5,-4(fp)
   11aac:	01000074 	movhi	r4,1
   11ab0:	210e3904 	addi	r4,r4,14564
   11ab4:	00119700 	call	11970 <alt_open_fd>
}  
   11ab8:	0001883a 	nop
   11abc:	e037883a 	mov	sp,fp
   11ac0:	dfc00117 	ldw	ra,4(sp)
   11ac4:	df000017 	ldw	fp,0(sp)
   11ac8:	dec00204 	addi	sp,sp,8
   11acc:	f800283a 	ret

00011ad0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11ad0:	defffe04 	addi	sp,sp,-8
   11ad4:	dfc00115 	stw	ra,4(sp)
   11ad8:	df000015 	stw	fp,0(sp)
   11adc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11ae0:	d0a00517 	ldw	r2,-32748(gp)
   11ae4:	10000326 	beq	r2,zero,11af4 <alt_get_errno+0x24>
   11ae8:	d0a00517 	ldw	r2,-32748(gp)
   11aec:	103ee83a 	callr	r2
   11af0:	00000106 	br	11af8 <alt_get_errno+0x28>
   11af4:	d0a5a804 	addi	r2,gp,-26976
}
   11af8:	e037883a 	mov	sp,fp
   11afc:	dfc00117 	ldw	ra,4(sp)
   11b00:	df000017 	ldw	fp,0(sp)
   11b04:	dec00204 	addi	sp,sp,8
   11b08:	f800283a 	ret

00011b0c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11b0c:	defffb04 	addi	sp,sp,-20
   11b10:	dfc00415 	stw	ra,16(sp)
   11b14:	df000315 	stw	fp,12(sp)
   11b18:	dc000215 	stw	r16,8(sp)
   11b1c:	df000304 	addi	fp,sp,12
   11b20:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11b24:	e0bffe17 	ldw	r2,-8(fp)
   11b28:	10800217 	ldw	r2,8(r2)
   11b2c:	10d00034 	orhi	r3,r2,16384
   11b30:	e0bffe17 	ldw	r2,-8(fp)
   11b34:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11b38:	e03ffd15 	stw	zero,-12(fp)
   11b3c:	00002306 	br	11bcc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11b40:	04000074 	movhi	r16,1
   11b44:	840e3304 	addi	r16,r16,14540
   11b48:	e0bffd17 	ldw	r2,-12(fp)
   11b4c:	01400304 	movi	r5,12
   11b50:	1009883a 	mov	r4,r2
   11b54:	00104c80 	call	104c8 <__mulsi3>
   11b58:	8085883a 	add	r2,r16,r2
   11b5c:	10c00017 	ldw	r3,0(r2)
   11b60:	e0bffe17 	ldw	r2,-8(fp)
   11b64:	10800017 	ldw	r2,0(r2)
   11b68:	1880151e 	bne	r3,r2,11bc0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11b6c:	04000074 	movhi	r16,1
   11b70:	840e3304 	addi	r16,r16,14540
   11b74:	e0bffd17 	ldw	r2,-12(fp)
   11b78:	01400304 	movi	r5,12
   11b7c:	1009883a 	mov	r4,r2
   11b80:	00104c80 	call	104c8 <__mulsi3>
   11b84:	8085883a 	add	r2,r16,r2
   11b88:	10800204 	addi	r2,r2,8
   11b8c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11b90:	10000b0e 	bge	r2,zero,11bc0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11b94:	01400304 	movi	r5,12
   11b98:	e13ffd17 	ldw	r4,-12(fp)
   11b9c:	00104c80 	call	104c8 <__mulsi3>
   11ba0:	1007883a 	mov	r3,r2
   11ba4:	00800074 	movhi	r2,1
   11ba8:	108e3304 	addi	r2,r2,14540
   11bac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11bb0:	e0bffe17 	ldw	r2,-8(fp)
   11bb4:	18800226 	beq	r3,r2,11bc0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11bb8:	00bffcc4 	movi	r2,-13
   11bbc:	00000806 	br	11be0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11bc0:	e0bffd17 	ldw	r2,-12(fp)
   11bc4:	10800044 	addi	r2,r2,1
   11bc8:	e0bffd15 	stw	r2,-12(fp)
   11bcc:	d0a00417 	ldw	r2,-32752(gp)
   11bd0:	1007883a 	mov	r3,r2
   11bd4:	e0bffd17 	ldw	r2,-12(fp)
   11bd8:	18bfd92e 	bgeu	r3,r2,11b40 <__alt_data_end+0xffff5b40>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11bdc:	0005883a 	mov	r2,zero
}
   11be0:	e6ffff04 	addi	sp,fp,-4
   11be4:	dfc00217 	ldw	ra,8(sp)
   11be8:	df000117 	ldw	fp,4(sp)
   11bec:	dc000017 	ldw	r16,0(sp)
   11bf0:	dec00304 	addi	sp,sp,12
   11bf4:	f800283a 	ret

00011bf8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11bf8:	defff604 	addi	sp,sp,-40
   11bfc:	dfc00915 	stw	ra,36(sp)
   11c00:	df000815 	stw	fp,32(sp)
   11c04:	df000804 	addi	fp,sp,32
   11c08:	e13ffd15 	stw	r4,-12(fp)
   11c0c:	e17ffe15 	stw	r5,-8(fp)
   11c10:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11c14:	00bfffc4 	movi	r2,-1
   11c18:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11c1c:	00bffb44 	movi	r2,-19
   11c20:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11c24:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11c28:	d1600204 	addi	r5,gp,-32760
   11c2c:	e13ffd17 	ldw	r4,-12(fp)
   11c30:	0011fa00 	call	11fa0 <alt_find_dev>
   11c34:	e0bff815 	stw	r2,-32(fp)
   11c38:	e0bff817 	ldw	r2,-32(fp)
   11c3c:	1000051e 	bne	r2,zero,11c54 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11c40:	e13ffd17 	ldw	r4,-12(fp)
   11c44:	00120300 	call	12030 <alt_find_file>
   11c48:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11c4c:	00800044 	movi	r2,1
   11c50:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11c54:	e0bff817 	ldw	r2,-32(fp)
   11c58:	10002b26 	beq	r2,zero,11d08 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11c5c:	e13ff817 	ldw	r4,-32(fp)
   11c60:	00121380 	call	12138 <alt_get_fd>
   11c64:	e0bff915 	stw	r2,-28(fp)
   11c68:	e0bff917 	ldw	r2,-28(fp)
   11c6c:	1000030e 	bge	r2,zero,11c7c <open+0x84>
    {
      status = index;
   11c70:	e0bff917 	ldw	r2,-28(fp)
   11c74:	e0bffa15 	stw	r2,-24(fp)
   11c78:	00002506 	br	11d10 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   11c7c:	01400304 	movi	r5,12
   11c80:	e13ff917 	ldw	r4,-28(fp)
   11c84:	00104c80 	call	104c8 <__mulsi3>
   11c88:	1007883a 	mov	r3,r2
   11c8c:	00800074 	movhi	r2,1
   11c90:	108e3304 	addi	r2,r2,14540
   11c94:	1885883a 	add	r2,r3,r2
   11c98:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11c9c:	e0fffe17 	ldw	r3,-8(fp)
   11ca0:	00900034 	movhi	r2,16384
   11ca4:	10bfffc4 	addi	r2,r2,-1
   11ca8:	1886703a 	and	r3,r3,r2
   11cac:	e0bffc17 	ldw	r2,-16(fp)
   11cb0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11cb4:	e0bffb17 	ldw	r2,-20(fp)
   11cb8:	1000051e 	bne	r2,zero,11cd0 <open+0xd8>
   11cbc:	e13ffc17 	ldw	r4,-16(fp)
   11cc0:	0011b0c0 	call	11b0c <alt_file_locked>
   11cc4:	e0bffa15 	stw	r2,-24(fp)
   11cc8:	e0bffa17 	ldw	r2,-24(fp)
   11ccc:	10001016 	blt	r2,zero,11d10 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11cd0:	e0bff817 	ldw	r2,-32(fp)
   11cd4:	10800317 	ldw	r2,12(r2)
   11cd8:	10000826 	beq	r2,zero,11cfc <open+0x104>
   11cdc:	e0bff817 	ldw	r2,-32(fp)
   11ce0:	10800317 	ldw	r2,12(r2)
   11ce4:	e1ffff17 	ldw	r7,-4(fp)
   11ce8:	e1bffe17 	ldw	r6,-8(fp)
   11cec:	e17ffd17 	ldw	r5,-12(fp)
   11cf0:	e13ffc17 	ldw	r4,-16(fp)
   11cf4:	103ee83a 	callr	r2
   11cf8:	00000106 	br	11d00 <open+0x108>
   11cfc:	0005883a 	mov	r2,zero
   11d00:	e0bffa15 	stw	r2,-24(fp)
   11d04:	00000206 	br	11d10 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11d08:	00bffb44 	movi	r2,-19
   11d0c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11d10:	e0bffa17 	ldw	r2,-24(fp)
   11d14:	1000090e 	bge	r2,zero,11d3c <open+0x144>
  {
    alt_release_fd (index);  
   11d18:	e13ff917 	ldw	r4,-28(fp)
   11d1c:	0011d540 	call	11d54 <alt_release_fd>
    ALT_ERRNO = -status;
   11d20:	0011ad00 	call	11ad0 <alt_get_errno>
   11d24:	1007883a 	mov	r3,r2
   11d28:	e0bffa17 	ldw	r2,-24(fp)
   11d2c:	0085c83a 	sub	r2,zero,r2
   11d30:	18800015 	stw	r2,0(r3)
    return -1;
   11d34:	00bfffc4 	movi	r2,-1
   11d38:	00000106 	br	11d40 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   11d3c:	e0bff917 	ldw	r2,-28(fp)
}
   11d40:	e037883a 	mov	sp,fp
   11d44:	dfc00117 	ldw	ra,4(sp)
   11d48:	df000017 	ldw	fp,0(sp)
   11d4c:	dec00204 	addi	sp,sp,8
   11d50:	f800283a 	ret

00011d54 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11d54:	defffc04 	addi	sp,sp,-16
   11d58:	dfc00315 	stw	ra,12(sp)
   11d5c:	df000215 	stw	fp,8(sp)
   11d60:	dc000115 	stw	r16,4(sp)
   11d64:	df000204 	addi	fp,sp,8
   11d68:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   11d6c:	e0bffe17 	ldw	r2,-8(fp)
   11d70:	108000d0 	cmplti	r2,r2,3
   11d74:	1000111e 	bne	r2,zero,11dbc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   11d78:	04000074 	movhi	r16,1
   11d7c:	840e3304 	addi	r16,r16,14540
   11d80:	e0bffe17 	ldw	r2,-8(fp)
   11d84:	01400304 	movi	r5,12
   11d88:	1009883a 	mov	r4,r2
   11d8c:	00104c80 	call	104c8 <__mulsi3>
   11d90:	8085883a 	add	r2,r16,r2
   11d94:	10800204 	addi	r2,r2,8
   11d98:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11d9c:	04000074 	movhi	r16,1
   11da0:	840e3304 	addi	r16,r16,14540
   11da4:	e0bffe17 	ldw	r2,-8(fp)
   11da8:	01400304 	movi	r5,12
   11dac:	1009883a 	mov	r4,r2
   11db0:	00104c80 	call	104c8 <__mulsi3>
   11db4:	8085883a 	add	r2,r16,r2
   11db8:	10000015 	stw	zero,0(r2)
  }
}
   11dbc:	0001883a 	nop
   11dc0:	e6ffff04 	addi	sp,fp,-4
   11dc4:	dfc00217 	ldw	ra,8(sp)
   11dc8:	df000117 	ldw	fp,4(sp)
   11dcc:	dc000017 	ldw	r16,0(sp)
   11dd0:	dec00304 	addi	sp,sp,12
   11dd4:	f800283a 	ret

00011dd8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11dd8:	defffa04 	addi	sp,sp,-24
   11ddc:	df000515 	stw	fp,20(sp)
   11de0:	df000504 	addi	fp,sp,20
   11de4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11de8:	0005303a 	rdctl	r2,status
   11dec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11df0:	e0fffc17 	ldw	r3,-16(fp)
   11df4:	00bfff84 	movi	r2,-2
   11df8:	1884703a 	and	r2,r3,r2
   11dfc:	1001703a 	wrctl	status,r2
  
  return context;
   11e00:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11e04:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11e08:	e0bfff17 	ldw	r2,-4(fp)
   11e0c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11e10:	e0bffd17 	ldw	r2,-12(fp)
   11e14:	10800017 	ldw	r2,0(r2)
   11e18:	e0fffd17 	ldw	r3,-12(fp)
   11e1c:	18c00117 	ldw	r3,4(r3)
   11e20:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11e24:	e0bffd17 	ldw	r2,-12(fp)
   11e28:	10800117 	ldw	r2,4(r2)
   11e2c:	e0fffd17 	ldw	r3,-12(fp)
   11e30:	18c00017 	ldw	r3,0(r3)
   11e34:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11e38:	e0bffd17 	ldw	r2,-12(fp)
   11e3c:	e0fffd17 	ldw	r3,-12(fp)
   11e40:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11e44:	e0bffd17 	ldw	r2,-12(fp)
   11e48:	e0fffd17 	ldw	r3,-12(fp)
   11e4c:	10c00015 	stw	r3,0(r2)
   11e50:	e0bffb17 	ldw	r2,-20(fp)
   11e54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e58:	e0bffe17 	ldw	r2,-8(fp)
   11e5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11e60:	0001883a 	nop
   11e64:	e037883a 	mov	sp,fp
   11e68:	df000017 	ldw	fp,0(sp)
   11e6c:	dec00104 	addi	sp,sp,4
   11e70:	f800283a 	ret

00011e74 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11e74:	defffb04 	addi	sp,sp,-20
   11e78:	dfc00415 	stw	ra,16(sp)
   11e7c:	df000315 	stw	fp,12(sp)
   11e80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11e84:	d0a00717 	ldw	r2,-32740(gp)
   11e88:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11e8c:	d0a5a617 	ldw	r2,-26984(gp)
   11e90:	10800044 	addi	r2,r2,1
   11e94:	d0a5a615 	stw	r2,-26984(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11e98:	00002e06 	br	11f54 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11e9c:	e0bffd17 	ldw	r2,-12(fp)
   11ea0:	10800017 	ldw	r2,0(r2)
   11ea4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11ea8:	e0bffd17 	ldw	r2,-12(fp)
   11eac:	10800403 	ldbu	r2,16(r2)
   11eb0:	10803fcc 	andi	r2,r2,255
   11eb4:	10000426 	beq	r2,zero,11ec8 <alt_tick+0x54>
   11eb8:	d0a5a617 	ldw	r2,-26984(gp)
   11ebc:	1000021e 	bne	r2,zero,11ec8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11ec0:	e0bffd17 	ldw	r2,-12(fp)
   11ec4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11ec8:	e0bffd17 	ldw	r2,-12(fp)
   11ecc:	10800217 	ldw	r2,8(r2)
   11ed0:	d0e5a617 	ldw	r3,-26984(gp)
   11ed4:	18801d36 	bltu	r3,r2,11f4c <alt_tick+0xd8>
   11ed8:	e0bffd17 	ldw	r2,-12(fp)
   11edc:	10800403 	ldbu	r2,16(r2)
   11ee0:	10803fcc 	andi	r2,r2,255
   11ee4:	1000191e 	bne	r2,zero,11f4c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11ee8:	e0bffd17 	ldw	r2,-12(fp)
   11eec:	10800317 	ldw	r2,12(r2)
   11ef0:	e0fffd17 	ldw	r3,-12(fp)
   11ef4:	18c00517 	ldw	r3,20(r3)
   11ef8:	1809883a 	mov	r4,r3
   11efc:	103ee83a 	callr	r2
   11f00:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11f04:	e0bfff17 	ldw	r2,-4(fp)
   11f08:	1000031e 	bne	r2,zero,11f18 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11f0c:	e13ffd17 	ldw	r4,-12(fp)
   11f10:	0011dd80 	call	11dd8 <alt_alarm_stop>
   11f14:	00000d06 	br	11f4c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11f18:	e0bffd17 	ldw	r2,-12(fp)
   11f1c:	10c00217 	ldw	r3,8(r2)
   11f20:	e0bfff17 	ldw	r2,-4(fp)
   11f24:	1887883a 	add	r3,r3,r2
   11f28:	e0bffd17 	ldw	r2,-12(fp)
   11f2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11f30:	e0bffd17 	ldw	r2,-12(fp)
   11f34:	10c00217 	ldw	r3,8(r2)
   11f38:	d0a5a617 	ldw	r2,-26984(gp)
   11f3c:	1880032e 	bgeu	r3,r2,11f4c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11f40:	e0bffd17 	ldw	r2,-12(fp)
   11f44:	00c00044 	movi	r3,1
   11f48:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11f4c:	e0bffe17 	ldw	r2,-8(fp)
   11f50:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11f54:	e0fffd17 	ldw	r3,-12(fp)
   11f58:	d0a00704 	addi	r2,gp,-32740
   11f5c:	18bfcf1e 	bne	r3,r2,11e9c <__alt_data_end+0xffff5e9c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11f60:	0001883a 	nop
}
   11f64:	0001883a 	nop
   11f68:	e037883a 	mov	sp,fp
   11f6c:	dfc00117 	ldw	ra,4(sp)
   11f70:	df000017 	ldw	fp,0(sp)
   11f74:	dec00204 	addi	sp,sp,8
   11f78:	f800283a 	ret

00011f7c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11f7c:	deffff04 	addi	sp,sp,-4
   11f80:	df000015 	stw	fp,0(sp)
   11f84:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11f88:	000170fa 	wrctl	ienable,zero
}
   11f8c:	0001883a 	nop
   11f90:	e037883a 	mov	sp,fp
   11f94:	df000017 	ldw	fp,0(sp)
   11f98:	dec00104 	addi	sp,sp,4
   11f9c:	f800283a 	ret

00011fa0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11fa0:	defffa04 	addi	sp,sp,-24
   11fa4:	dfc00515 	stw	ra,20(sp)
   11fa8:	df000415 	stw	fp,16(sp)
   11fac:	df000404 	addi	fp,sp,16
   11fb0:	e13ffe15 	stw	r4,-8(fp)
   11fb4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11fb8:	e0bfff17 	ldw	r2,-4(fp)
   11fbc:	10800017 	ldw	r2,0(r2)
   11fc0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11fc4:	e13ffe17 	ldw	r4,-8(fp)
   11fc8:	00124a80 	call	124a8 <strlen>
   11fcc:	10800044 	addi	r2,r2,1
   11fd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11fd4:	00000d06 	br	1200c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11fd8:	e0bffc17 	ldw	r2,-16(fp)
   11fdc:	10800217 	ldw	r2,8(r2)
   11fe0:	e0fffd17 	ldw	r3,-12(fp)
   11fe4:	180d883a 	mov	r6,r3
   11fe8:	e17ffe17 	ldw	r5,-8(fp)
   11fec:	1009883a 	mov	r4,r2
   11ff0:	00122e40 	call	122e4 <memcmp>
   11ff4:	1000021e 	bne	r2,zero,12000 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11ff8:	e0bffc17 	ldw	r2,-16(fp)
   11ffc:	00000706 	br	1201c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12000:	e0bffc17 	ldw	r2,-16(fp)
   12004:	10800017 	ldw	r2,0(r2)
   12008:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1200c:	e0fffc17 	ldw	r3,-16(fp)
   12010:	e0bfff17 	ldw	r2,-4(fp)
   12014:	18bff01e 	bne	r3,r2,11fd8 <__alt_data_end+0xffff5fd8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12018:	0005883a 	mov	r2,zero
}
   1201c:	e037883a 	mov	sp,fp
   12020:	dfc00117 	ldw	ra,4(sp)
   12024:	df000017 	ldw	fp,0(sp)
   12028:	dec00204 	addi	sp,sp,8
   1202c:	f800283a 	ret

00012030 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12030:	defffb04 	addi	sp,sp,-20
   12034:	dfc00415 	stw	ra,16(sp)
   12038:	df000315 	stw	fp,12(sp)
   1203c:	df000304 	addi	fp,sp,12
   12040:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12044:	d0a00017 	ldw	r2,-32768(gp)
   12048:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1204c:	00003106 	br	12114 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   12050:	e0bffd17 	ldw	r2,-12(fp)
   12054:	10800217 	ldw	r2,8(r2)
   12058:	1009883a 	mov	r4,r2
   1205c:	00124a80 	call	124a8 <strlen>
   12060:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12064:	e0bffd17 	ldw	r2,-12(fp)
   12068:	10c00217 	ldw	r3,8(r2)
   1206c:	e0bffe17 	ldw	r2,-8(fp)
   12070:	10bfffc4 	addi	r2,r2,-1
   12074:	1885883a 	add	r2,r3,r2
   12078:	10800003 	ldbu	r2,0(r2)
   1207c:	10803fcc 	andi	r2,r2,255
   12080:	1080201c 	xori	r2,r2,128
   12084:	10bfe004 	addi	r2,r2,-128
   12088:	10800bd8 	cmpnei	r2,r2,47
   1208c:	1000031e 	bne	r2,zero,1209c <alt_find_file+0x6c>
    {
      len -= 1;
   12090:	e0bffe17 	ldw	r2,-8(fp)
   12094:	10bfffc4 	addi	r2,r2,-1
   12098:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1209c:	e0bffe17 	ldw	r2,-8(fp)
   120a0:	e0ffff17 	ldw	r3,-4(fp)
   120a4:	1885883a 	add	r2,r3,r2
   120a8:	10800003 	ldbu	r2,0(r2)
   120ac:	10803fcc 	andi	r2,r2,255
   120b0:	1080201c 	xori	r2,r2,128
   120b4:	10bfe004 	addi	r2,r2,-128
   120b8:	10800be0 	cmpeqi	r2,r2,47
   120bc:	1000081e 	bne	r2,zero,120e0 <alt_find_file+0xb0>
   120c0:	e0bffe17 	ldw	r2,-8(fp)
   120c4:	e0ffff17 	ldw	r3,-4(fp)
   120c8:	1885883a 	add	r2,r3,r2
   120cc:	10800003 	ldbu	r2,0(r2)
   120d0:	10803fcc 	andi	r2,r2,255
   120d4:	1080201c 	xori	r2,r2,128
   120d8:	10bfe004 	addi	r2,r2,-128
   120dc:	10000a1e 	bne	r2,zero,12108 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   120e0:	e0bffd17 	ldw	r2,-12(fp)
   120e4:	10800217 	ldw	r2,8(r2)
   120e8:	e0fffe17 	ldw	r3,-8(fp)
   120ec:	180d883a 	mov	r6,r3
   120f0:	e17fff17 	ldw	r5,-4(fp)
   120f4:	1009883a 	mov	r4,r2
   120f8:	00122e40 	call	122e4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   120fc:	1000021e 	bne	r2,zero,12108 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12100:	e0bffd17 	ldw	r2,-12(fp)
   12104:	00000706 	br	12124 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   12108:	e0bffd17 	ldw	r2,-12(fp)
   1210c:	10800017 	ldw	r2,0(r2)
   12110:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12114:	e0fffd17 	ldw	r3,-12(fp)
   12118:	d0a00004 	addi	r2,gp,-32768
   1211c:	18bfcc1e 	bne	r3,r2,12050 <__alt_data_end+0xffff6050>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12120:	0005883a 	mov	r2,zero
}
   12124:	e037883a 	mov	sp,fp
   12128:	dfc00117 	ldw	ra,4(sp)
   1212c:	df000017 	ldw	fp,0(sp)
   12130:	dec00204 	addi	sp,sp,8
   12134:	f800283a 	ret

00012138 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12138:	defffa04 	addi	sp,sp,-24
   1213c:	dfc00515 	stw	ra,20(sp)
   12140:	df000415 	stw	fp,16(sp)
   12144:	dc000315 	stw	r16,12(sp)
   12148:	df000404 	addi	fp,sp,16
   1214c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   12150:	00bffa04 	movi	r2,-24
   12154:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12158:	e03ffc15 	stw	zero,-16(fp)
   1215c:	00001d06 	br	121d4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   12160:	04000074 	movhi	r16,1
   12164:	840e3304 	addi	r16,r16,14540
   12168:	e0bffc17 	ldw	r2,-16(fp)
   1216c:	01400304 	movi	r5,12
   12170:	1009883a 	mov	r4,r2
   12174:	00104c80 	call	104c8 <__mulsi3>
   12178:	8085883a 	add	r2,r16,r2
   1217c:	10800017 	ldw	r2,0(r2)
   12180:	1000111e 	bne	r2,zero,121c8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   12184:	04000074 	movhi	r16,1
   12188:	840e3304 	addi	r16,r16,14540
   1218c:	e0bffc17 	ldw	r2,-16(fp)
   12190:	01400304 	movi	r5,12
   12194:	1009883a 	mov	r4,r2
   12198:	00104c80 	call	104c8 <__mulsi3>
   1219c:	8085883a 	add	r2,r16,r2
   121a0:	e0fffe17 	ldw	r3,-8(fp)
   121a4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   121a8:	d0e00417 	ldw	r3,-32752(gp)
   121ac:	e0bffc17 	ldw	r2,-16(fp)
   121b0:	1880020e 	bge	r3,r2,121bc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   121b4:	e0bffc17 	ldw	r2,-16(fp)
   121b8:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   121bc:	e0bffc17 	ldw	r2,-16(fp)
   121c0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   121c4:	00000606 	br	121e0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   121c8:	e0bffc17 	ldw	r2,-16(fp)
   121cc:	10800044 	addi	r2,r2,1
   121d0:	e0bffc15 	stw	r2,-16(fp)
   121d4:	e0bffc17 	ldw	r2,-16(fp)
   121d8:	10800810 	cmplti	r2,r2,32
   121dc:	103fe01e 	bne	r2,zero,12160 <__alt_data_end+0xffff6160>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   121e0:	e0bffd17 	ldw	r2,-12(fp)
}
   121e4:	e6ffff04 	addi	sp,fp,-4
   121e8:	dfc00217 	ldw	ra,8(sp)
   121ec:	df000117 	ldw	fp,4(sp)
   121f0:	dc000017 	ldw	r16,0(sp)
   121f4:	dec00304 	addi	sp,sp,12
   121f8:	f800283a 	ret

000121fc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   121fc:	defffe04 	addi	sp,sp,-8
   12200:	df000115 	stw	fp,4(sp)
   12204:	df000104 	addi	fp,sp,4
   12208:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1220c:	e0bfff17 	ldw	r2,-4(fp)
   12210:	10bffe84 	addi	r2,r2,-6
   12214:	10c00428 	cmpgeui	r3,r2,16
   12218:	18001a1e 	bne	r3,zero,12284 <alt_exception_cause_generated_bad_addr+0x88>
   1221c:	100690ba 	slli	r3,r2,2
   12220:	00800074 	movhi	r2,1
   12224:	10888d04 	addi	r2,r2,8756
   12228:	1885883a 	add	r2,r3,r2
   1222c:	10800017 	ldw	r2,0(r2)
   12230:	1000683a 	jmp	r2
   12234:	00012274 	movhi	zero,1161
   12238:	00012274 	movhi	zero,1161
   1223c:	00012284 	movi	zero,1162
   12240:	00012284 	movi	zero,1162
   12244:	00012284 	movi	zero,1162
   12248:	00012274 	movhi	zero,1161
   1224c:	0001227c 	xorhi	zero,zero,1161
   12250:	00012284 	movi	zero,1162
   12254:	00012274 	movhi	zero,1161
   12258:	00012274 	movhi	zero,1161
   1225c:	00012284 	movi	zero,1162
   12260:	00012274 	movhi	zero,1161
   12264:	0001227c 	xorhi	zero,zero,1161
   12268:	00012284 	movi	zero,1162
   1226c:	00012284 	movi	zero,1162
   12270:	00012274 	movhi	zero,1161
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12274:	00800044 	movi	r2,1
   12278:	00000306 	br	12288 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1227c:	0005883a 	mov	r2,zero
   12280:	00000106 	br	12288 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12284:	0005883a 	mov	r2,zero
  }
}
   12288:	e037883a 	mov	sp,fp
   1228c:	df000017 	ldw	fp,0(sp)
   12290:	dec00104 	addi	sp,sp,4
   12294:	f800283a 	ret

00012298 <atexit>:
   12298:	200b883a 	mov	r5,r4
   1229c:	000f883a 	mov	r7,zero
   122a0:	000d883a 	mov	r6,zero
   122a4:	0009883a 	mov	r4,zero
   122a8:	00125401 	jmpi	12540 <__register_exitproc>

000122ac <exit>:
   122ac:	defffe04 	addi	sp,sp,-8
   122b0:	000b883a 	mov	r5,zero
   122b4:	dc000015 	stw	r16,0(sp)
   122b8:	dfc00115 	stw	ra,4(sp)
   122bc:	2021883a 	mov	r16,r4
   122c0:	00126580 	call	12658 <__call_exitprocs>
   122c4:	00800074 	movhi	r2,1
   122c8:	108fa504 	addi	r2,r2,16020
   122cc:	11000017 	ldw	r4,0(r2)
   122d0:	20800f17 	ldw	r2,60(r4)
   122d4:	10000126 	beq	r2,zero,122dc <exit+0x30>
   122d8:	103ee83a 	callr	r2
   122dc:	8009883a 	mov	r4,r16
   122e0:	00127d80 	call	127d8 <_exit>

000122e4 <memcmp>:
   122e4:	01c000c4 	movi	r7,3
   122e8:	3980192e 	bgeu	r7,r6,12350 <memcmp+0x6c>
   122ec:	2144b03a 	or	r2,r4,r5
   122f0:	11c4703a 	and	r2,r2,r7
   122f4:	10000f26 	beq	r2,zero,12334 <memcmp+0x50>
   122f8:	20800003 	ldbu	r2,0(r4)
   122fc:	28c00003 	ldbu	r3,0(r5)
   12300:	10c0151e 	bne	r2,r3,12358 <memcmp+0x74>
   12304:	31bfff84 	addi	r6,r6,-2
   12308:	01ffffc4 	movi	r7,-1
   1230c:	00000406 	br	12320 <memcmp+0x3c>
   12310:	20800003 	ldbu	r2,0(r4)
   12314:	28c00003 	ldbu	r3,0(r5)
   12318:	31bfffc4 	addi	r6,r6,-1
   1231c:	10c00e1e 	bne	r2,r3,12358 <memcmp+0x74>
   12320:	21000044 	addi	r4,r4,1
   12324:	29400044 	addi	r5,r5,1
   12328:	31fff91e 	bne	r6,r7,12310 <__alt_data_end+0xffff6310>
   1232c:	0005883a 	mov	r2,zero
   12330:	f800283a 	ret
   12334:	20c00017 	ldw	r3,0(r4)
   12338:	28800017 	ldw	r2,0(r5)
   1233c:	18bfee1e 	bne	r3,r2,122f8 <__alt_data_end+0xffff62f8>
   12340:	31bfff04 	addi	r6,r6,-4
   12344:	21000104 	addi	r4,r4,4
   12348:	29400104 	addi	r5,r5,4
   1234c:	39bff936 	bltu	r7,r6,12334 <__alt_data_end+0xffff6334>
   12350:	303fe91e 	bne	r6,zero,122f8 <__alt_data_end+0xffff62f8>
   12354:	003ff506 	br	1232c <__alt_data_end+0xffff632c>
   12358:	10c5c83a 	sub	r2,r2,r3
   1235c:	f800283a 	ret

00012360 <memcpy>:
   12360:	defffd04 	addi	sp,sp,-12
   12364:	dfc00215 	stw	ra,8(sp)
   12368:	dc400115 	stw	r17,4(sp)
   1236c:	dc000015 	stw	r16,0(sp)
   12370:	00c003c4 	movi	r3,15
   12374:	2005883a 	mov	r2,r4
   12378:	1980452e 	bgeu	r3,r6,12490 <memcpy+0x130>
   1237c:	2906b03a 	or	r3,r5,r4
   12380:	18c000cc 	andi	r3,r3,3
   12384:	1800441e 	bne	r3,zero,12498 <memcpy+0x138>
   12388:	347ffc04 	addi	r17,r6,-16
   1238c:	8822d13a 	srli	r17,r17,4
   12390:	28c00104 	addi	r3,r5,4
   12394:	23400104 	addi	r13,r4,4
   12398:	8820913a 	slli	r16,r17,4
   1239c:	2b000204 	addi	r12,r5,8
   123a0:	22c00204 	addi	r11,r4,8
   123a4:	84000504 	addi	r16,r16,20
   123a8:	2a800304 	addi	r10,r5,12
   123ac:	22400304 	addi	r9,r4,12
   123b0:	2c21883a 	add	r16,r5,r16
   123b4:	2811883a 	mov	r8,r5
   123b8:	200f883a 	mov	r7,r4
   123bc:	41000017 	ldw	r4,0(r8)
   123c0:	1fc00017 	ldw	ra,0(r3)
   123c4:	63c00017 	ldw	r15,0(r12)
   123c8:	39000015 	stw	r4,0(r7)
   123cc:	53800017 	ldw	r14,0(r10)
   123d0:	6fc00015 	stw	ra,0(r13)
   123d4:	5bc00015 	stw	r15,0(r11)
   123d8:	4b800015 	stw	r14,0(r9)
   123dc:	18c00404 	addi	r3,r3,16
   123e0:	39c00404 	addi	r7,r7,16
   123e4:	42000404 	addi	r8,r8,16
   123e8:	6b400404 	addi	r13,r13,16
   123ec:	63000404 	addi	r12,r12,16
   123f0:	5ac00404 	addi	r11,r11,16
   123f4:	52800404 	addi	r10,r10,16
   123f8:	4a400404 	addi	r9,r9,16
   123fc:	1c3fef1e 	bne	r3,r16,123bc <__alt_data_end+0xffff63bc>
   12400:	89c00044 	addi	r7,r17,1
   12404:	380e913a 	slli	r7,r7,4
   12408:	310003cc 	andi	r4,r6,15
   1240c:	02c000c4 	movi	r11,3
   12410:	11c7883a 	add	r3,r2,r7
   12414:	29cb883a 	add	r5,r5,r7
   12418:	5900212e 	bgeu	r11,r4,124a0 <memcpy+0x140>
   1241c:	1813883a 	mov	r9,r3
   12420:	2811883a 	mov	r8,r5
   12424:	200f883a 	mov	r7,r4
   12428:	42800017 	ldw	r10,0(r8)
   1242c:	4a400104 	addi	r9,r9,4
   12430:	39ffff04 	addi	r7,r7,-4
   12434:	4abfff15 	stw	r10,-4(r9)
   12438:	42000104 	addi	r8,r8,4
   1243c:	59fffa36 	bltu	r11,r7,12428 <__alt_data_end+0xffff6428>
   12440:	213fff04 	addi	r4,r4,-4
   12444:	2008d0ba 	srli	r4,r4,2
   12448:	318000cc 	andi	r6,r6,3
   1244c:	21000044 	addi	r4,r4,1
   12450:	2109883a 	add	r4,r4,r4
   12454:	2109883a 	add	r4,r4,r4
   12458:	1907883a 	add	r3,r3,r4
   1245c:	290b883a 	add	r5,r5,r4
   12460:	30000626 	beq	r6,zero,1247c <memcpy+0x11c>
   12464:	198d883a 	add	r6,r3,r6
   12468:	29c00003 	ldbu	r7,0(r5)
   1246c:	18c00044 	addi	r3,r3,1
   12470:	29400044 	addi	r5,r5,1
   12474:	19ffffc5 	stb	r7,-1(r3)
   12478:	19bffb1e 	bne	r3,r6,12468 <__alt_data_end+0xffff6468>
   1247c:	dfc00217 	ldw	ra,8(sp)
   12480:	dc400117 	ldw	r17,4(sp)
   12484:	dc000017 	ldw	r16,0(sp)
   12488:	dec00304 	addi	sp,sp,12
   1248c:	f800283a 	ret
   12490:	2007883a 	mov	r3,r4
   12494:	003ff206 	br	12460 <__alt_data_end+0xffff6460>
   12498:	2007883a 	mov	r3,r4
   1249c:	003ff106 	br	12464 <__alt_data_end+0xffff6464>
   124a0:	200d883a 	mov	r6,r4
   124a4:	003fee06 	br	12460 <__alt_data_end+0xffff6460>

000124a8 <strlen>:
   124a8:	208000cc 	andi	r2,r4,3
   124ac:	10002026 	beq	r2,zero,12530 <strlen+0x88>
   124b0:	20800007 	ldb	r2,0(r4)
   124b4:	10002026 	beq	r2,zero,12538 <strlen+0x90>
   124b8:	2005883a 	mov	r2,r4
   124bc:	00000206 	br	124c8 <strlen+0x20>
   124c0:	10c00007 	ldb	r3,0(r2)
   124c4:	18001826 	beq	r3,zero,12528 <strlen+0x80>
   124c8:	10800044 	addi	r2,r2,1
   124cc:	10c000cc 	andi	r3,r2,3
   124d0:	183ffb1e 	bne	r3,zero,124c0 <__alt_data_end+0xffff64c0>
   124d4:	10c00017 	ldw	r3,0(r2)
   124d8:	01ffbff4 	movhi	r7,65279
   124dc:	39ffbfc4 	addi	r7,r7,-257
   124e0:	00ca303a 	nor	r5,zero,r3
   124e4:	01a02074 	movhi	r6,32897
   124e8:	19c7883a 	add	r3,r3,r7
   124ec:	31a02004 	addi	r6,r6,-32640
   124f0:	1946703a 	and	r3,r3,r5
   124f4:	1986703a 	and	r3,r3,r6
   124f8:	1800091e 	bne	r3,zero,12520 <strlen+0x78>
   124fc:	10800104 	addi	r2,r2,4
   12500:	10c00017 	ldw	r3,0(r2)
   12504:	19cb883a 	add	r5,r3,r7
   12508:	00c6303a 	nor	r3,zero,r3
   1250c:	28c6703a 	and	r3,r5,r3
   12510:	1986703a 	and	r3,r3,r6
   12514:	183ff926 	beq	r3,zero,124fc <__alt_data_end+0xffff64fc>
   12518:	00000106 	br	12520 <strlen+0x78>
   1251c:	10800044 	addi	r2,r2,1
   12520:	10c00007 	ldb	r3,0(r2)
   12524:	183ffd1e 	bne	r3,zero,1251c <__alt_data_end+0xffff651c>
   12528:	1105c83a 	sub	r2,r2,r4
   1252c:	f800283a 	ret
   12530:	2005883a 	mov	r2,r4
   12534:	003fe706 	br	124d4 <__alt_data_end+0xffff64d4>
   12538:	0005883a 	mov	r2,zero
   1253c:	f800283a 	ret

00012540 <__register_exitproc>:
   12540:	defffa04 	addi	sp,sp,-24
   12544:	dc000315 	stw	r16,12(sp)
   12548:	04000074 	movhi	r16,1
   1254c:	840fa504 	addi	r16,r16,16020
   12550:	80c00017 	ldw	r3,0(r16)
   12554:	dc400415 	stw	r17,16(sp)
   12558:	dfc00515 	stw	ra,20(sp)
   1255c:	18805217 	ldw	r2,328(r3)
   12560:	2023883a 	mov	r17,r4
   12564:	10003726 	beq	r2,zero,12644 <__register_exitproc+0x104>
   12568:	10c00117 	ldw	r3,4(r2)
   1256c:	010007c4 	movi	r4,31
   12570:	20c00e16 	blt	r4,r3,125ac <__register_exitproc+0x6c>
   12574:	1a000044 	addi	r8,r3,1
   12578:	8800221e 	bne	r17,zero,12604 <__register_exitproc+0xc4>
   1257c:	18c00084 	addi	r3,r3,2
   12580:	18c7883a 	add	r3,r3,r3
   12584:	18c7883a 	add	r3,r3,r3
   12588:	12000115 	stw	r8,4(r2)
   1258c:	10c7883a 	add	r3,r2,r3
   12590:	19400015 	stw	r5,0(r3)
   12594:	0005883a 	mov	r2,zero
   12598:	dfc00517 	ldw	ra,20(sp)
   1259c:	dc400417 	ldw	r17,16(sp)
   125a0:	dc000317 	ldw	r16,12(sp)
   125a4:	dec00604 	addi	sp,sp,24
   125a8:	f800283a 	ret
   125ac:	00800034 	movhi	r2,0
   125b0:	10800004 	addi	r2,r2,0
   125b4:	10002626 	beq	r2,zero,12650 <__register_exitproc+0x110>
   125b8:	01006404 	movi	r4,400
   125bc:	d9400015 	stw	r5,0(sp)
   125c0:	d9800115 	stw	r6,4(sp)
   125c4:	d9c00215 	stw	r7,8(sp)
   125c8:	00000000 	call	0 <__reset-0x10000>
   125cc:	d9400017 	ldw	r5,0(sp)
   125d0:	d9800117 	ldw	r6,4(sp)
   125d4:	d9c00217 	ldw	r7,8(sp)
   125d8:	10001d26 	beq	r2,zero,12650 <__register_exitproc+0x110>
   125dc:	81000017 	ldw	r4,0(r16)
   125e0:	10000115 	stw	zero,4(r2)
   125e4:	02000044 	movi	r8,1
   125e8:	22405217 	ldw	r9,328(r4)
   125ec:	0007883a 	mov	r3,zero
   125f0:	12400015 	stw	r9,0(r2)
   125f4:	20805215 	stw	r2,328(r4)
   125f8:	10006215 	stw	zero,392(r2)
   125fc:	10006315 	stw	zero,396(r2)
   12600:	883fde26 	beq	r17,zero,1257c <__alt_data_end+0xffff657c>
   12604:	18c9883a 	add	r4,r3,r3
   12608:	2109883a 	add	r4,r4,r4
   1260c:	1109883a 	add	r4,r2,r4
   12610:	21802215 	stw	r6,136(r4)
   12614:	01800044 	movi	r6,1
   12618:	12406217 	ldw	r9,392(r2)
   1261c:	30cc983a 	sll	r6,r6,r3
   12620:	4992b03a 	or	r9,r9,r6
   12624:	12406215 	stw	r9,392(r2)
   12628:	21c04215 	stw	r7,264(r4)
   1262c:	01000084 	movi	r4,2
   12630:	893fd21e 	bne	r17,r4,1257c <__alt_data_end+0xffff657c>
   12634:	11006317 	ldw	r4,396(r2)
   12638:	218cb03a 	or	r6,r4,r6
   1263c:	11806315 	stw	r6,396(r2)
   12640:	003fce06 	br	1257c <__alt_data_end+0xffff657c>
   12644:	18805304 	addi	r2,r3,332
   12648:	18805215 	stw	r2,328(r3)
   1264c:	003fc606 	br	12568 <__alt_data_end+0xffff6568>
   12650:	00bfffc4 	movi	r2,-1
   12654:	003fd006 	br	12598 <__alt_data_end+0xffff6598>

00012658 <__call_exitprocs>:
   12658:	defff504 	addi	sp,sp,-44
   1265c:	df000915 	stw	fp,36(sp)
   12660:	dd400615 	stw	r21,24(sp)
   12664:	dc800315 	stw	r18,12(sp)
   12668:	dfc00a15 	stw	ra,40(sp)
   1266c:	ddc00815 	stw	r23,32(sp)
   12670:	dd800715 	stw	r22,28(sp)
   12674:	dd000515 	stw	r20,20(sp)
   12678:	dcc00415 	stw	r19,16(sp)
   1267c:	dc400215 	stw	r17,8(sp)
   12680:	dc000115 	stw	r16,4(sp)
   12684:	d9000015 	stw	r4,0(sp)
   12688:	2839883a 	mov	fp,r5
   1268c:	04800044 	movi	r18,1
   12690:	057fffc4 	movi	r21,-1
   12694:	00800074 	movhi	r2,1
   12698:	108fa504 	addi	r2,r2,16020
   1269c:	12000017 	ldw	r8,0(r2)
   126a0:	45005217 	ldw	r20,328(r8)
   126a4:	44c05204 	addi	r19,r8,328
   126a8:	a0001c26 	beq	r20,zero,1271c <__call_exitprocs+0xc4>
   126ac:	a0800117 	ldw	r2,4(r20)
   126b0:	15ffffc4 	addi	r23,r2,-1
   126b4:	b8000d16 	blt	r23,zero,126ec <__call_exitprocs+0x94>
   126b8:	14000044 	addi	r16,r2,1
   126bc:	8421883a 	add	r16,r16,r16
   126c0:	8421883a 	add	r16,r16,r16
   126c4:	84402004 	addi	r17,r16,128
   126c8:	a463883a 	add	r17,r20,r17
   126cc:	a421883a 	add	r16,r20,r16
   126d0:	e0001e26 	beq	fp,zero,1274c <__call_exitprocs+0xf4>
   126d4:	80804017 	ldw	r2,256(r16)
   126d8:	e0801c26 	beq	fp,r2,1274c <__call_exitprocs+0xf4>
   126dc:	bdffffc4 	addi	r23,r23,-1
   126e0:	843fff04 	addi	r16,r16,-4
   126e4:	8c7fff04 	addi	r17,r17,-4
   126e8:	bd7ff91e 	bne	r23,r21,126d0 <__alt_data_end+0xffff66d0>
   126ec:	00800034 	movhi	r2,0
   126f0:	10800004 	addi	r2,r2,0
   126f4:	10000926 	beq	r2,zero,1271c <__call_exitprocs+0xc4>
   126f8:	a0800117 	ldw	r2,4(r20)
   126fc:	1000301e 	bne	r2,zero,127c0 <__call_exitprocs+0x168>
   12700:	a0800017 	ldw	r2,0(r20)
   12704:	10003226 	beq	r2,zero,127d0 <__call_exitprocs+0x178>
   12708:	a009883a 	mov	r4,r20
   1270c:	98800015 	stw	r2,0(r19)
   12710:	00000000 	call	0 <__reset-0x10000>
   12714:	9d000017 	ldw	r20,0(r19)
   12718:	a03fe41e 	bne	r20,zero,126ac <__alt_data_end+0xffff66ac>
   1271c:	dfc00a17 	ldw	ra,40(sp)
   12720:	df000917 	ldw	fp,36(sp)
   12724:	ddc00817 	ldw	r23,32(sp)
   12728:	dd800717 	ldw	r22,28(sp)
   1272c:	dd400617 	ldw	r21,24(sp)
   12730:	dd000517 	ldw	r20,20(sp)
   12734:	dcc00417 	ldw	r19,16(sp)
   12738:	dc800317 	ldw	r18,12(sp)
   1273c:	dc400217 	ldw	r17,8(sp)
   12740:	dc000117 	ldw	r16,4(sp)
   12744:	dec00b04 	addi	sp,sp,44
   12748:	f800283a 	ret
   1274c:	a0800117 	ldw	r2,4(r20)
   12750:	80c00017 	ldw	r3,0(r16)
   12754:	10bfffc4 	addi	r2,r2,-1
   12758:	15c01426 	beq	r2,r23,127ac <__call_exitprocs+0x154>
   1275c:	80000015 	stw	zero,0(r16)
   12760:	183fde26 	beq	r3,zero,126dc <__alt_data_end+0xffff66dc>
   12764:	95c8983a 	sll	r4,r18,r23
   12768:	a0806217 	ldw	r2,392(r20)
   1276c:	a5800117 	ldw	r22,4(r20)
   12770:	2084703a 	and	r2,r4,r2
   12774:	10000b26 	beq	r2,zero,127a4 <__call_exitprocs+0x14c>
   12778:	a0806317 	ldw	r2,396(r20)
   1277c:	2088703a 	and	r4,r4,r2
   12780:	20000c1e 	bne	r4,zero,127b4 <__call_exitprocs+0x15c>
   12784:	89400017 	ldw	r5,0(r17)
   12788:	d9000017 	ldw	r4,0(sp)
   1278c:	183ee83a 	callr	r3
   12790:	a0800117 	ldw	r2,4(r20)
   12794:	15bfbf1e 	bne	r2,r22,12694 <__alt_data_end+0xffff6694>
   12798:	98800017 	ldw	r2,0(r19)
   1279c:	153fcf26 	beq	r2,r20,126dc <__alt_data_end+0xffff66dc>
   127a0:	003fbc06 	br	12694 <__alt_data_end+0xffff6694>
   127a4:	183ee83a 	callr	r3
   127a8:	003ff906 	br	12790 <__alt_data_end+0xffff6790>
   127ac:	a5c00115 	stw	r23,4(r20)
   127b0:	003feb06 	br	12760 <__alt_data_end+0xffff6760>
   127b4:	89000017 	ldw	r4,0(r17)
   127b8:	183ee83a 	callr	r3
   127bc:	003ff406 	br	12790 <__alt_data_end+0xffff6790>
   127c0:	a0800017 	ldw	r2,0(r20)
   127c4:	a027883a 	mov	r19,r20
   127c8:	1029883a 	mov	r20,r2
   127cc:	003fb606 	br	126a8 <__alt_data_end+0xffff66a8>
   127d0:	0005883a 	mov	r2,zero
   127d4:	003ffb06 	br	127c4 <__alt_data_end+0xffff67c4>

000127d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   127d8:	defffd04 	addi	sp,sp,-12
   127dc:	df000215 	stw	fp,8(sp)
   127e0:	df000204 	addi	fp,sp,8
   127e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   127e8:	0001883a 	nop
   127ec:	e0bfff17 	ldw	r2,-4(fp)
   127f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   127f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   127f8:	10000226 	beq	r2,zero,12804 <_exit+0x2c>
    ALT_SIM_FAIL();
   127fc:	002af070 	cmpltui	zero,zero,43969
   12800:	00000106 	br	12808 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12804:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12808:	003fff06 	br	12808 <__alt_data_end+0xffff6808>
